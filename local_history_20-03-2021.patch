Index: app/src/main/res/menu/main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/main.xml	(date 1616303295733)
+++ app/src/main/res/menu/main.xml	(date 1616303295733)
@@ -4,7 +4,7 @@
     <item
         android:id="@+id/app_bar_search"
         android:icon="@android:drawable/ic_menu_search"
-        android:title="@string/action_search"
+        android:title="@string/searchForPosts"
         app:actionViewClass="android.widget.SearchView"
         app:showAsAction="always"
         />
Index: app/src/main/res/layout/fragment_home.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_home.xml	(date 1616300602431)
+++ app/src/main/res/layout/fragment_home.xml	(date 1616300602431)
@@ -1,17 +1,50 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     tools:context=".ui.home.HomeFragment">
 
-    <androidx.recyclerview.widget.RecyclerView
-
-        android:id="@+id/homeRecyclerView"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent">
+    <androidx.swiperefreshlayout.widget.SwipeRefreshLayout
+        android:id="@+id/swipeRefreshLayout"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/homeRecyclerView"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:background="#F5F5F5">
 
 
-    </androidx.recyclerview.widget.RecyclerView>
-</LinearLayout>
\ No newline at end of file
+        </androidx.recyclerview.widget.RecyclerView>
+
+    </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>
+
+    <TextView
+        android:id="@+id/emptyView"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="center"
+        android:text="@string/no_data_available"
+        android:visibility="gone" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:orientation="vertical">
+
+        <com.github.ybq.android.spinkit.SpinKitView
+            android:id="@+id/spinKit"
+            style="@style/SpinKitView.Large.Circle"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:visibility="gone"
+            app:SpinKit_Color="@color/darkgreen" />
+
+    </LinearLayout>
+</RelativeLayout>
\ No newline at end of file
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(date 1616301726759)
+++ app/src/main/res/values/strings.xml	(date 1616301726759)
@@ -9,7 +9,7 @@
 
     <string name="action_change_layout">Change the layout</string>
     <string name="choose_layout">Choose a layout</string>
-    <string name="action_search">Search</string>
+    <string name="searchForPosts">search for posts</string>
     <string name="action_share">Share</string>
     <string name="copyTheLink">Copy the link</string>
     <string name="linkCopied">Link copied to clipboard</string>
Index: app/src/main/java/com/test/dummyappv3/ui/home/HomeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/test/dummyappv3/ui/home/HomeFragment.java	(date 1616327248021)
+++ app/src/main/java/com/test/dummyappv3/ui/home/HomeFragment.java	(date 1616327248021)
@@ -1,5 +1,6 @@
 package com.test.dummyappv3.ui.home;
 
+import android.app.SearchManager;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.os.Bundle;
@@ -10,6 +11,9 @@
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.SearchView;
+import android.widget.SearchView.OnQueryTextListener;
+import android.widget.TextView;
 import android.widget.Toast;
 
 import androidx.annotation.NonNull;
@@ -52,33 +56,42 @@
     private int currentItems, totalItems, scrollOutItems, selectedIndex;
     private GridLayoutManager titleLayoutManager, gridLayoutManager;
     WrapContentLinearLayoutManager layoutManager;
-
-
     private SharedPreferences sharedPreferences;
-
     public ItemsDatabase itemsDatabase;
+    private TextView emptyView, versionCode;
+    private boolean searchState = false;
+    private SearchView searchView;
+
 
     public View onCreateView(@NonNull LayoutInflater inflater,
                              ViewGroup container, Bundle savedInstanceState) {
 
         postViewModel = new ViewModelProvider(this).get(PostViewModel.class);
 
+        View root = inflater.inflate(R.layout.fragment_home, container, false);
+
+
+        emptyView = root.findViewById(R.id.emptyView);
+
         itemsDatabase = ItemsDatabase.getINSTANCE(getContext());
 
         postViewModel.finalURL.setValue(PostsClient.getBaseUrl() + "?key=" + PostsClient.getKEY() );
 
-        postViewModel.getPosts();
-
-        View root = inflater.inflate(R.layout.fragment_home, container, false);
-
-        setHasOptionsMenu(true);
-
-        itemArrayList = new ArrayList<>();
+        itemArrayList = new ArrayList<>();
+
+        if(!searchState) {
+            postViewModel.getPosts();
+        }
 
         recyclerView = root.findViewById(R.id.homeRecyclerView);
         adapter = new PostAdapter(getContext(),itemArrayList);
 
 
+
+        setHasOptionsMenu(true);
+
+
+
         layoutManager = new WrapContentLinearLayoutManager(getContext(),
                 LinearLayoutManager.VERTICAL, false);
         titleLayoutManager = new GridLayoutManager(getContext(), 2);
@@ -115,7 +128,7 @@
 
 
         if (Utils.hasNetworkAccess(getContext())) {
-            postViewModel.postListMutableLiveData.observe(HomeFragment.this, new Observer<PostList>() {
+            postViewModel.postListMutableLiveData.observe(getViewLifecycleOwner(), new Observer<PostList>() {
                 @Override
                 public void onChanged(PostList postList) {
                     itemArrayList.addAll(postList.getItems());
@@ -145,20 +158,26 @@
                 }
             });
 
-        } else {
-          /*  if (sqLiteItemsDBHelper.getAllItems().isEmpty()) {
-                emptyView.setVisibility(View.VISIBLE);
-            } else {
-                Log.e(TAG, "Size :" + sqLiteItemsDBHelper.getAllItems().size());
-                for (Item item : sqLiteItemsDBHelper.getAllItems()) {
-                    items.add(item);
-
-                }
-            }*/
+            postViewModel.ifAnythingWrongHappened.observe(HomeFragment.this, new Observer<Boolean>() {
+                @Override
+                public void onChanged(Boolean aBoolean) {
+                    if(aBoolean){
+                        recyclerView.setVisibility(View.GONE);
+                        emptyView.setVisibility(View.VISIBLE);
+                        itemArrayList.clear();
+                    }else {
+                        emptyView.setVisibility(View.GONE);
+                        recyclerView.setVisibility(View.VISIBLE);
+                    }
+                }
+            });
+        } else {
 
             if(itemsDatabase.itemDAO().getAlItems() == null){
 
                 Toast.makeText(getContext(),"Empty", Toast.LENGTH_LONG).show();
+                recyclerView.setVisibility(View.GONE);
+                emptyView.setVisibility(View.VISIBLE);
 
             }else {
                 Log.e(TAG, "RoomDB Items size :" + itemsDatabase.itemDAO().getAlItems());
@@ -181,7 +200,8 @@
 
                     @Override
                     public void onError(@io.reactivex.annotations.NonNull Throwable e) {
-
+                        recyclerView.setVisibility(View.GONE);
+                        emptyView.setVisibility(View.VISIBLE);
                     }
                 });
                         
@@ -198,9 +218,6 @@
             public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {
                 super.onScrollStateChanged(recyclerView, newState);
                     isScrolling = true;
-
-
-
             }
 
             @Override
@@ -222,8 +239,13 @@
                     }
                     if (isScrolling && (currentItems + scrollOutItems == totalItems)) {
                         isScrolling = false;
-                        postViewModel.getPosts();
-//                        adapter.notifyDataSetChanged();
+
+                        if(searchState){
+                            postViewModel.getItemsBySearch(searchView.getQuery().toString());
+                        }else {
+                            postViewModel.getPosts();
+                            adapter.notifyDataSetChanged();
+                        }
 
 
                     }
@@ -231,12 +253,14 @@
 
             }
         });
+
 
 
         return root;
 
     }
 
+
     @Override
     public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {
         //Empty the old menu
@@ -245,6 +269,36 @@
 //        }
         inflater.inflate(R.menu.main, menu);
         super.onCreateOptionsMenu(menu, inflater);
+
+        SearchManager searchManager = (SearchManager) getContext().getSystemService(Context.SEARCH_SERVICE);
+        searchView = (SearchView) menu.findItem(R.id.app_bar_search).getActionView();
+        searchView.setSearchableInfo(searchManager.getSearchableInfo(getActivity().getComponentName()));
+        searchView.setQueryHint(getResources().getString(R.string.searchForPosts));
+        searchView.setOnQueryTextListener(new OnQueryTextListener() {
+            @Override
+            public boolean onQueryTextSubmit(String keyword) {
+                searchState = true;
+                itemArrayList.clear();
+                postViewModel.getItemsBySearch(keyword);
+                return false;
+            }
+
+            @Override
+            public boolean onQueryTextChange(String s) {
+                return false;
+            }
+        });
+
+        searchView.setOnCloseListener(() -> {
+            searchState = false;
+            emptyView.setVisibility(View.GONE);
+            recyclerView.setVisibility(View.VISIBLE);
+            postViewModel.getPosts();
+            return false;
+        });
+
+
+
     }
 
     @Override
Index: app/src/main/java/com/test/dummyappv3/ui/main/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/test/dummyappv3/ui/main/MainActivity.java	(date 1616300118961)
+++ app/src/main/java/com/test/dummyappv3/ui/main/MainActivity.java	(date 1616300118961)
@@ -1,5 +1,6 @@
 package com.test.dummyappv3.ui.main;
 
+import android.inputmethodservice.Keyboard;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.Menu;
@@ -56,6 +57,8 @@
         setSupportActionBar(toolbar);
         FloatingActionButton fab = findViewById(R.id.fab);
 
+
+
         itemList = new ArrayList<>();
         recyclerView = new RecyclerView(this);
         postAdapter = new PostAdapter(this,itemList);
Index: app/src/main/java/com/test/dummyappv3/ui/main/PostViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/test/dummyappv3/ui/main/PostViewModel.java	(date 1616327248033)
+++ app/src/main/java/com/test/dummyappv3/ui/main/PostViewModel.java	(date 1616327248033)
@@ -23,6 +23,12 @@
     public MutableLiveData<String> finalURL = new MutableLiveData<>();
     public MutableLiveData<String> token = new MutableLiveData<>();
     public MutableLiveData<String> label = new MutableLiveData<>();
+    private final MutableLiveData<Boolean> loadingStateLiveData
+            = new MutableLiveData<Boolean>();
+
+    public MutableLiveData<Boolean> ifAnythingWrongHappened = new MutableLiveData<>();
+
+
 
     @Override
     protected void onCleared() {
@@ -33,7 +39,7 @@
     }
 
     public void getPosts(){
-
+        ifAnythingWrongHappened.setValue(false);
         Log.e(TAG,finalURL.getValue());
 
         PostsClient.getINSTANCE().getPostList(finalURL.getValue()).enqueue(new Callback<PostList>() {
@@ -60,6 +66,7 @@
             @Override
             public void onFailure(Call<PostList> call, Throwable t) {
                 Log.e(TAG,t.getMessage());
+                ifAnythingWrongHappened.setValue(true);
             }
         });
 
@@ -68,6 +75,8 @@
 
     public void getPostListByLabel() {
 
+        ifAnythingWrongHappened.setValue(false);
+
         Log.e(TAG, finalURL.getValue());
 
         PostsByLabelClient.getINSTANCE().getPostListByLabel(finalURL.getValue()).enqueue(new Callback<PostList>() {
@@ -95,9 +104,70 @@
 
             @Override
             public void onFailure(@NotNull Call<PostList> call, @NotNull Throwable t) {
+                ifAnythingWrongHappened.setValue(true);
+            }
+        });
+
+    }
+
+    public void getItemsBySearch(String keyword) {
+        ifAnythingWrongHappened.setValue(false);
 
-            }
-        });
+        if(!token.getValue().isEmpty()) {
+            token.setValue("");
+        }
+
+
+        final String url = PostsClient.getBaseUrl() +
+                "search?q=" + keyword + "&key=" + PostsClient.getKEY();
+
+        Log.e("ItemsBySearch",url);
+
+         PostsClient.getINSTANCE().getPostList(url).enqueue(new Callback<PostList>() {
+             @Override
+             public void onResponse(Call<PostList> call, Response<PostList> response) {
+                 if (response.isSuccessful()) {
+//                     progressBar.setVisibility(View.GONE);
+//                     items.clear();
+                     PostList list = response.body();
+                     assert list != null;
+                     if (list.getItems() != null) {
+                         postListMutableLiveData.setValue(list);
+                         token.setValue(list.getNextPageToken());
+//                         adapter.notifyDataSetChanged();
+                     } else {
+                         ifAnythingWrongHappened.setValue(true);
+//                         progressBar.setVisibility(View.GONE);
+//                         emptyView.setVisibility(View.VISIBLE);
+
+                     }
+
+                 } else {
+                     ifAnythingWrongHappened.setValue(true);
+//                     progressBar.setVisibility(View.GONE);
+//                     recyclerView.setVisibility(View.GONE);
+//                     emptyView.setVisibility(View.VISIBLE);
+
+                     int sc = response.code();
+                     switch (sc) {
+                         case 400:
+                             Log.e("Error 400", "Bad Request");
+                             break;
+                         case 404:
+                             Log.e("Error 404", "Not Found");
+                             break;
+                         default:
+                             Log.e("Error", "Generic Error");
+                     }
+                 }
+             }
+
+             @Override
+             public void onFailure(Call<PostList> call, Throwable t) {
+                 ifAnythingWrongHappened.setValue(true);
+             }
+         });
+
 
     }
 
Index: app/src/main/java/com/test/dummyappv3/ui/fashion/FashionFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/test/dummyappv3/ui/fashion/FashionFragment.java	(date 1616326989261)
+++ app/src/main/java/com/test/dummyappv3/ui/fashion/FashionFragment.java	(date 1616326989261)
@@ -40,7 +40,7 @@
     private List<Item> itemArrayList;
 
     private boolean isScrolling = false;
-    private int currentItems, totalItems, scrollOutItems, selectedIndex;
+    private int currentItems, totalItems, scrollOutItems;
     private GridLayoutManager titleLayoutManager, gridLayoutManager;
     WrapContentLinearLayoutManager layoutManager;
     private SharedPreferences sharedPreferences;
