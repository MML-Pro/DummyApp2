Index: app/src/main/java/com/test/dummyappv3/ui/home/HomeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/test/dummyappv3/ui/home/HomeFragment.java	(date 1617109432054)
+++ app/src/main/java/com/test/dummyappv3/ui/home/HomeFragment.java	(date 1617109432054)
@@ -44,7 +44,7 @@
 import java.util.List;
 import com.test.dummyappv3.utils.Utils;
 
-public class HomeFragment extends Fragment {
+public class HomeFragment extends Fragment implements OnQueryTextListener{
 
     private PostViewModel postViewModel;
     public static final String TAG = "HomeFragment";
@@ -59,6 +59,7 @@
     private SharedPreferences sharedPreferences;
     public ItemsDatabase itemsDatabase;
     private TextView emptyView, versionCode;
+    private boolean searchState = false;
     private SearchView searchView;
 
 
@@ -78,6 +79,9 @@
 
         itemArrayList = new ArrayList<>();
 
+        if(searchState == false) {
+            postViewModel.getPosts();
+        }
 
         recyclerView = root.findViewById(R.id.homeRecyclerView);
         adapter = new PostAdapter(getContext(),itemArrayList);
@@ -124,10 +128,7 @@
 
 
         if (Utils.hasNetworkAccess(getContext())) {
-
-            postViewModel.getPosts();
-
-            postViewModel.postListMutableLiveData.observe(getViewLifecycleOwner(), new Observer<PostList>() {
+            postViewModel.postListMutableLiveData.observe(HomeFragment.this, new Observer<PostList>() {
                 @Override
                 public void onChanged(PostList postList) {
                     itemArrayList.addAll(postList.getItems());
@@ -154,11 +155,24 @@
                                 });
                     }
 
+                }
+            });
+            postViewModel.ifAnythingWrongHappened.observe(HomeFragment.this, new Observer<Boolean>() {
+                @Override
+                public void onChanged(Boolean aBoolean) {
+                    if(aBoolean){
+                        recyclerView.setVisibility(View.GONE);
+                        emptyView.setVisibility(View.VISIBLE);
+                        itemArrayList.clear();
+                    }else {
+                        emptyView.setVisibility(View.GONE);
+                        recyclerView.setVisibility(View.VISIBLE);
+                    }
                 }
             });
         } else {
 
-            if(itemsDatabase.itemDAO().getAlItems() == null ){
+            if(itemsDatabase.itemDAO().getAlItems() == null){
 
                 Toast.makeText(getContext(),"Empty", Toast.LENGTH_LONG).show();
                 recyclerView.setVisibility(View.GONE);
@@ -167,7 +181,6 @@
             }else {
                 Log.e(TAG, "RoomDB Items size :" + itemsDatabase.itemDAO().getAlItems());
 
-//                emptyView.setVisibility(View.GONE);
                 recyclerView.setVisibility(View.VISIBLE);
 
                 itemsDatabase.itemDAO().getAlItems()
@@ -182,14 +195,12 @@
                     public void onSuccess(@io.reactivex.annotations.NonNull List<Item> items) {
                         itemArrayList.addAll(items);
                         adapter.notifyDataSetChanged();
-                        Log.e(TAG," THE FIRST POST IN ROOM DB " +items.get(0).getTitle());
                     }
 
                     @Override
                     public void onError(@io.reactivex.annotations.NonNull Throwable e) {
                         recyclerView.setVisibility(View.GONE);
                         emptyView.setVisibility(View.VISIBLE);
-                        Log.e(TAG,"onError" + e.toString());
                     }
                 });
                         
@@ -198,20 +209,6 @@
             Log.d(TAG, "utils: "+ itemArrayList.isEmpty() + " ");
         }
 
-        postViewModel.ifAnythingWrongHappened.observe(getViewLifecycleOwner(), new Observer<Boolean>() {
-            @Override
-            public void onChanged(Boolean aBoolean) {
-                if(aBoolean){
-                    recyclerView.setVisibility(View.GONE);
-                    emptyView.setVisibility(View.VISIBLE);
-                    itemArrayList.clear();
-                }else {
-                    emptyView.setVisibility(View.GONE);
-                    recyclerView.setVisibility(View.VISIBLE);
-                }
-            }
-        });
-
 
 
 
@@ -245,6 +242,11 @@
                     if (isScrolling && (currentItems + scrollOutItems == totalItems)) {
                         isScrolling = false;
 
+                        if(searchState){
+                            postViewModel.getItemsBySearch(searchView.getQuery().toString());
+                        }else {
+                            postViewModel.getPosts();
+                        }
 
 
 
@@ -274,24 +276,12 @@
         searchView = (SearchView) menu.findItem(R.id.app_bar_search).getActionView();
         searchView.setSearchableInfo(searchManager.getSearchableInfo(getActivity().getComponentName()));
         searchView.setQueryHint(getResources().getString(R.string.searchForPosts));
-        searchView.setOnQueryTextListener(new OnQueryTextListener() {
-            @Override
-            public boolean onQueryTextSubmit(String keyword) {
-                itemArrayList.clear();
-                postViewModel.getItemsBySearch(keyword);
-                adapter.notifyDataSetChanged();
-                return false;
-            }
-
-            @Override
-            public boolean onQueryTextChange(String s) {
-                return false;
-            }
-        });
+        searchView.setOnQueryTextListener(this);
 
         searchView.setOnCloseListener(new SearchView.OnCloseListener() {
             @Override
             public boolean onClose() {
+                searchState = false;
                 emptyView.setVisibility(View.GONE);
                 recyclerView.setVisibility(View.VISIBLE);
                 postViewModel.getPosts();
@@ -357,4 +347,17 @@
         return super.onOptionsItemSelected(item);
     }
 
+    @Override
+    public boolean onQueryTextSubmit(String keyword) {
+        searchState = true;
+        itemArrayList.clear();
+        postViewModel.getItemsBySearch(keyword);
+        adapter.notifyDataSetChanged();
+        return false;
+    }
+
+    @Override
+    public boolean onQueryTextChange(String s) {
+        return false;
+    }
 }
\ No newline at end of file
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(date 1617105864606)
+++ app/src/main/AndroidManifest.xml	(date 1617105864606)
@@ -11,7 +11,6 @@
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
         android:usesCleartextTraffic="true"
-        android:largeHeap="true"
         android:theme="@style/Theme.DummyAppV3">
         <activity
             android:name=".ui.main.MainActivity"
