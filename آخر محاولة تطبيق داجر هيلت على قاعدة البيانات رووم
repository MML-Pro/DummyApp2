Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/di/DatabaseModule_ProvideDaoFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/di/DatabaseModule_ProvideDaoFactory.java	(date 1628686170915)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/di/DatabaseModule_ProvideDaoFactory.java	(date 1628686170915)
@@ -0,0 +1,36 @@
+// Generated by Dagger (https://dagger.dev).
+package com.test.dummyappv3.di;
+
+import com.test.dummyappv3.data.database.ItemDAO;
+import com.test.dummyappv3.data.database.ItemsDatabase;
+import dagger.internal.DaggerGenerated;
+import dagger.internal.Factory;
+import dagger.internal.Preconditions;
+import javax.inject.Provider;
+
+@DaggerGenerated
+@SuppressWarnings({
+    "unchecked",
+    "rawtypes"
+})
+public final class DatabaseModule_ProvideDaoFactory implements Factory<ItemDAO> {
+  private final Provider<ItemsDatabase> itemsDatabaseProvider;
+
+  public DatabaseModule_ProvideDaoFactory(Provider<ItemsDatabase> itemsDatabaseProvider) {
+    this.itemsDatabaseProvider = itemsDatabaseProvider;
+  }
+
+  @Override
+  public ItemDAO get() {
+    return provideDao(itemsDatabaseProvider.get());
+  }
+
+  public static DatabaseModule_ProvideDaoFactory create(
+      Provider<ItemsDatabase> itemsDatabaseProvider) {
+    return new DatabaseModule_ProvideDaoFactory(itemsDatabaseProvider);
+  }
+
+  public static ItemDAO provideDao(ItemsDatabase itemsDatabase) {
+    return Preconditions.checkNotNullFromProvides(DatabaseModule.provideDao(itemsDatabase));
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/di/NetworkModule_PostAPIServiceFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/di/NetworkModule_PostAPIServiceFactory.java	(date 1628686170926)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/di/NetworkModule_PostAPIServiceFactory.java	(date 1628686170926)
@@ -0,0 +1,31 @@
+// Generated by Dagger (https://dagger.dev).
+package com.test.dummyappv3.di;
+
+import com.test.dummyappv3.data.network.PostAPIService;
+import dagger.internal.DaggerGenerated;
+import dagger.internal.Factory;
+import dagger.internal.Preconditions;
+
+@DaggerGenerated
+@SuppressWarnings({
+    "unchecked",
+    "rawtypes"
+})
+public final class NetworkModule_PostAPIServiceFactory implements Factory<PostAPIService> {
+  @Override
+  public PostAPIService get() {
+    return postAPIService();
+  }
+
+  public static NetworkModule_PostAPIServiceFactory create() {
+    return InstanceHolder.INSTANCE;
+  }
+
+  public static PostAPIService postAPIService() {
+    return Preconditions.checkNotNullFromProvides(NetworkModule.postAPIService());
+  }
+
+  private static final class InstanceHolder {
+    private static final NetworkModule_PostAPIServiceFactory INSTANCE = new NetworkModule_PostAPIServiceFactory();
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/di/DatabaseModule_ProvideDatabaseFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/di/DatabaseModule_ProvideDatabaseFactory.java	(date 1628686170905)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/di/DatabaseModule_ProvideDatabaseFactory.java	(date 1628686170905)
@@ -0,0 +1,35 @@
+// Generated by Dagger (https://dagger.dev).
+package com.test.dummyappv3.di;
+
+import android.content.Context;
+import com.test.dummyappv3.data.database.ItemsDatabase;
+import dagger.internal.DaggerGenerated;
+import dagger.internal.Factory;
+import dagger.internal.Preconditions;
+import javax.inject.Provider;
+
+@DaggerGenerated
+@SuppressWarnings({
+    "unchecked",
+    "rawtypes"
+})
+public final class DatabaseModule_ProvideDatabaseFactory implements Factory<ItemsDatabase> {
+  private final Provider<Context> contextProvider;
+
+  public DatabaseModule_ProvideDatabaseFactory(Provider<Context> contextProvider) {
+    this.contextProvider = contextProvider;
+  }
+
+  @Override
+  public ItemsDatabase get() {
+    return provideDatabase(contextProvider.get());
+  }
+
+  public static DatabaseModule_ProvideDatabaseFactory create(Provider<Context> contextProvider) {
+    return new DatabaseModule_ProvideDatabaseFactory(contextProvider);
+  }
+
+  public static ItemsDatabase provideDatabase(Context context) {
+    return Preconditions.checkNotNullFromProvides(DatabaseModule.provideDatabase(context));
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/di/NetworkModule_ProvideHTTPClientFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/di/NetworkModule_ProvideHTTPClientFactory.java	(date 1628686170923)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/di/NetworkModule_ProvideHTTPClientFactory.java	(date 1628686170923)
@@ -0,0 +1,31 @@
+// Generated by Dagger (https://dagger.dev).
+package com.test.dummyappv3.di;
+
+import dagger.internal.DaggerGenerated;
+import dagger.internal.Factory;
+import dagger.internal.Preconditions;
+import okhttp3.OkHttpClient;
+
+@DaggerGenerated
+@SuppressWarnings({
+    "unchecked",
+    "rawtypes"
+})
+public final class NetworkModule_ProvideHTTPClientFactory implements Factory<OkHttpClient> {
+  @Override
+  public OkHttpClient get() {
+    return provideHTTPClient();
+  }
+
+  public static NetworkModule_ProvideHTTPClientFactory create() {
+    return InstanceHolder.INSTANCE;
+  }
+
+  public static OkHttpClient provideHTTPClient() {
+    return Preconditions.checkNotNullFromProvides(NetworkModule.provideHTTPClient());
+  }
+
+  private static final class InstanceHolder {
+    private static final NetworkModule_ProvideHTTPClientFactory INSTANCE = new NetworkModule_ProvideHTTPClientFactory();
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/food/Hilt_FoodFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/food/Hilt_FoodFragment.java	(date 1628686170415)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/food/Hilt_FoodFragment.java	(date 1628686170415)
@@ -0,0 +1,114 @@
+package com.test.dummyappv3.ui.food;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.ContextWrapper;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import androidx.annotation.CallSuper;
+import androidx.annotation.MainThread;
+import androidx.fragment.app.Fragment;
+import androidx.lifecycle.ViewModelProvider;
+import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
+import dagger.hilt.android.internal.managers.FragmentComponentManager;
+import dagger.hilt.internal.GeneratedComponentManagerHolder;
+import dagger.hilt.internal.Preconditions;
+import dagger.hilt.internal.UnsafeCasts;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+
+/**
+ * A generated base class to be extended by the @dagger.hilt.android.AndroidEntryPoint annotated class. If using the Gradle plugin, this is swapped as the base class via bytecode transformation.
+ */
+@SuppressWarnings("deprecation")
+abstract class Hilt_FoodFragment extends Fragment implements GeneratedComponentManagerHolder {
+  private ContextWrapper componentContext;
+
+  private volatile FragmentComponentManager componentManager;
+
+  private final Object componentManagerLock = new Object();
+
+  private boolean injected = false;
+
+  Hilt_FoodFragment() {
+    super();
+  }
+
+  Hilt_FoodFragment(int contentLayoutId) {
+    super(contentLayoutId);
+  }
+
+  @Override
+  @CallSuper
+  public void onAttach(Context context) {
+    super.onAttach(context);
+    initializeComponentContext();
+    inject();
+  }
+
+  @Override
+  @CallSuper
+  @MainThread
+  public void onAttach(Activity activity) {
+    super.onAttach(activity);
+    Preconditions.checkState(componentContext == null || FragmentComponentManager.findActivity(componentContext) == activity, "onAttach called multiple times with different Context! Hilt Fragments should not be retained.");
+    initializeComponentContext();
+    inject();
+  }
+
+  private void initializeComponentContext() {
+    if (componentContext == null) {
+      // Note: The LayoutInflater provided by this componentContext may be different from super Fragment's because we getting it from base context instead of cloning from the super Fragment's LayoutInflater.
+      componentContext = FragmentComponentManager.createContextWrapper(super.getContext(), this);
+    }
+  }
+
+  @Override
+  public Context getContext() {
+    if (super.getContext() == null && componentContext == null) {
+      return null;
+    }
+    initializeComponentContext();
+    return componentContext;
+  }
+
+  @Override
+  public LayoutInflater onGetLayoutInflater(Bundle savedInstanceState) {
+    LayoutInflater inflater = super.onGetLayoutInflater(savedInstanceState);
+    return LayoutInflater.from(FragmentComponentManager.createContextWrapper(inflater, this));
+  }
+
+  @Override
+  public final Object generatedComponent() {
+    return this.componentManager().generatedComponent();
+  }
+
+  protected FragmentComponentManager createComponentManager() {
+    return new FragmentComponentManager(this);
+  }
+
+  @Override
+  public final FragmentComponentManager componentManager() {
+    if (componentManager == null) {
+      synchronized (componentManagerLock) {
+        if (componentManager == null) {
+          componentManager = createComponentManager();
+        }
+      }
+    }
+    return componentManager;
+  }
+
+  protected void inject() {
+    if (!injected) {
+      injected = true;
+      ((FoodFragment_GeneratedInjector) this.generatedComponent()).injectFoodFragment(UnsafeCasts.<FoodFragment>unsafeCast(this));
+    }
+  }
+
+  @Override
+  public ViewModelProvider.Factory getDefaultViewModelProviderFactory() {
+    return DefaultViewModelFactories.getFragmentFactory(this, super.getDefaultViewModelProviderFactory());
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/food/FoodFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/food/FoodFragment_GeneratedInjector.java	(date 1628686170407)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/food/FoodFragment_GeneratedInjector.java	(date 1628686170407)
@@ -0,0 +1,15 @@
+package com.test.dummyappv3.ui.food;
+
+import dagger.hilt.InstallIn;
+import dagger.hilt.android.components.FragmentComponent;
+import dagger.hilt.codegen.OriginatingElement;
+import dagger.hilt.internal.GeneratedEntryPoint;
+
+@OriginatingElement(
+    topLevelClass = FoodFragment.class
+)
+@GeneratedEntryPoint
+@InstallIn(FragmentComponent.class)
+public interface FoodFragment_GeneratedInjector {
+  void injectFoodFragment(FoodFragment foodFragment);
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/home/Hilt_HomeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/home/Hilt_HomeFragment.java	(date 1628686170434)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/home/Hilt_HomeFragment.java	(date 1628686170434)
@@ -0,0 +1,114 @@
+package com.test.dummyappv3.ui.home;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.ContextWrapper;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import androidx.annotation.CallSuper;
+import androidx.annotation.MainThread;
+import androidx.fragment.app.Fragment;
+import androidx.lifecycle.ViewModelProvider;
+import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
+import dagger.hilt.android.internal.managers.FragmentComponentManager;
+import dagger.hilt.internal.GeneratedComponentManagerHolder;
+import dagger.hilt.internal.Preconditions;
+import dagger.hilt.internal.UnsafeCasts;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+
+/**
+ * A generated base class to be extended by the @dagger.hilt.android.AndroidEntryPoint annotated class. If using the Gradle plugin, this is swapped as the base class via bytecode transformation.
+ */
+@SuppressWarnings("deprecation")
+abstract class Hilt_HomeFragment extends Fragment implements GeneratedComponentManagerHolder {
+  private ContextWrapper componentContext;
+
+  private volatile FragmentComponentManager componentManager;
+
+  private final Object componentManagerLock = new Object();
+
+  private boolean injected = false;
+
+  Hilt_HomeFragment() {
+    super();
+  }
+
+  Hilt_HomeFragment(int contentLayoutId) {
+    super(contentLayoutId);
+  }
+
+  @Override
+  @CallSuper
+  public void onAttach(Context context) {
+    super.onAttach(context);
+    initializeComponentContext();
+    inject();
+  }
+
+  @Override
+  @CallSuper
+  @MainThread
+  public void onAttach(Activity activity) {
+    super.onAttach(activity);
+    Preconditions.checkState(componentContext == null || FragmentComponentManager.findActivity(componentContext) == activity, "onAttach called multiple times with different Context! Hilt Fragments should not be retained.");
+    initializeComponentContext();
+    inject();
+  }
+
+  private void initializeComponentContext() {
+    if (componentContext == null) {
+      // Note: The LayoutInflater provided by this componentContext may be different from super Fragment's because we getting it from base context instead of cloning from the super Fragment's LayoutInflater.
+      componentContext = FragmentComponentManager.createContextWrapper(super.getContext(), this);
+    }
+  }
+
+  @Override
+  public Context getContext() {
+    if (super.getContext() == null && componentContext == null) {
+      return null;
+    }
+    initializeComponentContext();
+    return componentContext;
+  }
+
+  @Override
+  public LayoutInflater onGetLayoutInflater(Bundle savedInstanceState) {
+    LayoutInflater inflater = super.onGetLayoutInflater(savedInstanceState);
+    return LayoutInflater.from(FragmentComponentManager.createContextWrapper(inflater, this));
+  }
+
+  @Override
+  public final Object generatedComponent() {
+    return this.componentManager().generatedComponent();
+  }
+
+  protected FragmentComponentManager createComponentManager() {
+    return new FragmentComponentManager(this);
+  }
+
+  @Override
+  public final FragmentComponentManager componentManager() {
+    if (componentManager == null) {
+      synchronized (componentManagerLock) {
+        if (componentManager == null) {
+          componentManager = createComponentManager();
+        }
+      }
+    }
+    return componentManager;
+  }
+
+  protected void inject() {
+    if (!injected) {
+      injected = true;
+      ((HomeFragment_GeneratedInjector) this.generatedComponent()).injectHomeFragment(UnsafeCasts.<HomeFragment>unsafeCast(this));
+    }
+  }
+
+  @Override
+  public ViewModelProvider.Factory getDefaultViewModelProviderFactory() {
+    return DefaultViewModelFactories.getFragmentFactory(this, super.getDefaultViewModelProviderFactory());
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/home/HomeFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/home/HomeFragment_GeneratedInjector.java	(date 1628686170429)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/home/HomeFragment_GeneratedInjector.java	(date 1628686170429)
@@ -0,0 +1,15 @@
+package com.test.dummyappv3.ui.home;
+
+import dagger.hilt.InstallIn;
+import dagger.hilt.android.components.FragmentComponent;
+import dagger.hilt.codegen.OriginatingElement;
+import dagger.hilt.internal.GeneratedEntryPoint;
+
+@OriginatingElement(
+    topLevelClass = HomeFragment.class
+)
+@GeneratedEntryPoint
+@InstallIn(FragmentComponent.class)
+public interface HomeFragment_GeneratedInjector {
+  void injectHomeFragment(HomeFragment homeFragment);
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/main/Hilt_MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/main/Hilt_MainActivity.java	(date 1628686170455)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/main/Hilt_MainActivity.java	(date 1628686170455)
@@ -0,0 +1,75 @@
+package com.test.dummyappv3.ui.main;
+
+import android.content.Context;
+import androidx.activity.contextaware.OnContextAvailableListener;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.lifecycle.ViewModelProvider;
+import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
+import dagger.hilt.android.internal.managers.ActivityComponentManager;
+import dagger.hilt.internal.GeneratedComponentManagerHolder;
+import dagger.hilt.internal.UnsafeCasts;
+import java.lang.Object;
+import java.lang.Override;
+
+/**
+ * A generated base class to be extended by the @dagger.hilt.android.AndroidEntryPoint annotated class. If using the Gradle plugin, this is swapped as the base class via bytecode transformation.
+ */
+abstract class Hilt_MainActivity extends AppCompatActivity implements GeneratedComponentManagerHolder {
+  private volatile ActivityComponentManager componentManager;
+
+  private final Object componentManagerLock = new Object();
+
+  private boolean injected = false;
+
+  Hilt_MainActivity() {
+    super();
+    _initHiltInternal();
+  }
+
+  Hilt_MainActivity(int contentLayoutId) {
+    super(contentLayoutId);
+    _initHiltInternal();
+  }
+
+  private void _initHiltInternal() {
+    addOnContextAvailableListener(new OnContextAvailableListener() {
+      @Override
+      public void onContextAvailable(Context context) {
+        inject();
+      }
+    });
+  }
+
+  @Override
+  public final Object generatedComponent() {
+    return this.componentManager().generatedComponent();
+  }
+
+  protected ActivityComponentManager createComponentManager() {
+    return new ActivityComponentManager(this);
+  }
+
+  @Override
+  public final ActivityComponentManager componentManager() {
+    if (componentManager == null) {
+      synchronized (componentManagerLock) {
+        if (componentManager == null) {
+          componentManager = createComponentManager();
+        }
+      }
+    }
+    return componentManager;
+  }
+
+  protected void inject() {
+    if (!injected) {
+      injected = true;
+      ((MainActivity_GeneratedInjector) this.generatedComponent()).injectMainActivity(UnsafeCasts.<MainActivity>unsafeCast(this));
+    }
+  }
+
+  @Override
+  public ViewModelProvider.Factory getDefaultViewModelProviderFactory() {
+    return DefaultViewModelFactories.getActivityFactory(this, super.getDefaultViewModelProviderFactory());
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/main/MainActivity_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/main/MainActivity_GeneratedInjector.java	(date 1628686170447)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/main/MainActivity_GeneratedInjector.java	(date 1628686170447)
@@ -0,0 +1,15 @@
+package com.test.dummyappv3.ui.main;
+
+import dagger.hilt.InstallIn;
+import dagger.hilt.android.components.ActivityComponent;
+import dagger.hilt.codegen.OriginatingElement;
+import dagger.hilt.internal.GeneratedEntryPoint;
+
+@OriginatingElement(
+    topLevelClass = MainActivity.class
+)
+@GeneratedEntryPoint
+@InstallIn(ActivityComponent.class)
+public interface MainActivity_GeneratedInjector {
+  void injectMainActivity(MainActivity mainActivity);
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/heath/Hilt_HeathFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/heath/Hilt_HeathFragment.java	(date 1628686170425)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/heath/Hilt_HeathFragment.java	(date 1628686170425)
@@ -0,0 +1,114 @@
+package com.test.dummyappv3.ui.heath;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.ContextWrapper;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import androidx.annotation.CallSuper;
+import androidx.annotation.MainThread;
+import androidx.fragment.app.Fragment;
+import androidx.lifecycle.ViewModelProvider;
+import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
+import dagger.hilt.android.internal.managers.FragmentComponentManager;
+import dagger.hilt.internal.GeneratedComponentManagerHolder;
+import dagger.hilt.internal.Preconditions;
+import dagger.hilt.internal.UnsafeCasts;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+
+/**
+ * A generated base class to be extended by the @dagger.hilt.android.AndroidEntryPoint annotated class. If using the Gradle plugin, this is swapped as the base class via bytecode transformation.
+ */
+@SuppressWarnings("deprecation")
+abstract class Hilt_HeathFragment extends Fragment implements GeneratedComponentManagerHolder {
+  private ContextWrapper componentContext;
+
+  private volatile FragmentComponentManager componentManager;
+
+  private final Object componentManagerLock = new Object();
+
+  private boolean injected = false;
+
+  Hilt_HeathFragment() {
+    super();
+  }
+
+  Hilt_HeathFragment(int contentLayoutId) {
+    super(contentLayoutId);
+  }
+
+  @Override
+  @CallSuper
+  public void onAttach(Context context) {
+    super.onAttach(context);
+    initializeComponentContext();
+    inject();
+  }
+
+  @Override
+  @CallSuper
+  @MainThread
+  public void onAttach(Activity activity) {
+    super.onAttach(activity);
+    Preconditions.checkState(componentContext == null || FragmentComponentManager.findActivity(componentContext) == activity, "onAttach called multiple times with different Context! Hilt Fragments should not be retained.");
+    initializeComponentContext();
+    inject();
+  }
+
+  private void initializeComponentContext() {
+    if (componentContext == null) {
+      // Note: The LayoutInflater provided by this componentContext may be different from super Fragment's because we getting it from base context instead of cloning from the super Fragment's LayoutInflater.
+      componentContext = FragmentComponentManager.createContextWrapper(super.getContext(), this);
+    }
+  }
+
+  @Override
+  public Context getContext() {
+    if (super.getContext() == null && componentContext == null) {
+      return null;
+    }
+    initializeComponentContext();
+    return componentContext;
+  }
+
+  @Override
+  public LayoutInflater onGetLayoutInflater(Bundle savedInstanceState) {
+    LayoutInflater inflater = super.onGetLayoutInflater(savedInstanceState);
+    return LayoutInflater.from(FragmentComponentManager.createContextWrapper(inflater, this));
+  }
+
+  @Override
+  public final Object generatedComponent() {
+    return this.componentManager().generatedComponent();
+  }
+
+  protected FragmentComponentManager createComponentManager() {
+    return new FragmentComponentManager(this);
+  }
+
+  @Override
+  public final FragmentComponentManager componentManager() {
+    if (componentManager == null) {
+      synchronized (componentManagerLock) {
+        if (componentManager == null) {
+          componentManager = createComponentManager();
+        }
+      }
+    }
+    return componentManager;
+  }
+
+  protected void inject() {
+    if (!injected) {
+      injected = true;
+      ((HeathFragment_GeneratedInjector) this.generatedComponent()).injectHeathFragment(UnsafeCasts.<HeathFragment>unsafeCast(this));
+    }
+  }
+
+  @Override
+  public ViewModelProvider.Factory getDefaultViewModelProviderFactory() {
+    return DefaultViewModelFactories.getFragmentFactory(this, super.getDefaultViewModelProviderFactory());
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/heath/HeathFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/heath/HeathFragment_GeneratedInjector.java	(date 1628686170419)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/heath/HeathFragment_GeneratedInjector.java	(date 1628686170419)
@@ -0,0 +1,15 @@
+package com.test.dummyappv3.ui.heath;
+
+import dagger.hilt.InstallIn;
+import dagger.hilt.android.components.FragmentComponent;
+import dagger.hilt.codegen.OriginatingElement;
+import dagger.hilt.internal.GeneratedEntryPoint;
+
+@OriginatingElement(
+    topLevelClass = HeathFragment.class
+)
+@GeneratedEntryPoint
+@InstallIn(FragmentComponent.class)
+public interface HeathFragment_GeneratedInjector {
+  void injectHeathFragment(HeathFragment heathFragment);
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/arcade/Hilt_ArcadeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/arcade/Hilt_ArcadeFragment.java	(date 1628686170392)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/arcade/Hilt_ArcadeFragment.java	(date 1628686170392)
@@ -0,0 +1,114 @@
+package com.test.dummyappv3.ui.arcade;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.ContextWrapper;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import androidx.annotation.CallSuper;
+import androidx.annotation.MainThread;
+import androidx.fragment.app.Fragment;
+import androidx.lifecycle.ViewModelProvider;
+import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
+import dagger.hilt.android.internal.managers.FragmentComponentManager;
+import dagger.hilt.internal.GeneratedComponentManagerHolder;
+import dagger.hilt.internal.Preconditions;
+import dagger.hilt.internal.UnsafeCasts;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+
+/**
+ * A generated base class to be extended by the @dagger.hilt.android.AndroidEntryPoint annotated class. If using the Gradle plugin, this is swapped as the base class via bytecode transformation.
+ */
+@SuppressWarnings("deprecation")
+abstract class Hilt_ArcadeFragment extends Fragment implements GeneratedComponentManagerHolder {
+  private ContextWrapper componentContext;
+
+  private volatile FragmentComponentManager componentManager;
+
+  private final Object componentManagerLock = new Object();
+
+  private boolean injected = false;
+
+  Hilt_ArcadeFragment() {
+    super();
+  }
+
+  Hilt_ArcadeFragment(int contentLayoutId) {
+    super(contentLayoutId);
+  }
+
+  @Override
+  @CallSuper
+  public void onAttach(Context context) {
+    super.onAttach(context);
+    initializeComponentContext();
+    inject();
+  }
+
+  @Override
+  @CallSuper
+  @MainThread
+  public void onAttach(Activity activity) {
+    super.onAttach(activity);
+    Preconditions.checkState(componentContext == null || FragmentComponentManager.findActivity(componentContext) == activity, "onAttach called multiple times with different Context! Hilt Fragments should not be retained.");
+    initializeComponentContext();
+    inject();
+  }
+
+  private void initializeComponentContext() {
+    if (componentContext == null) {
+      // Note: The LayoutInflater provided by this componentContext may be different from super Fragment's because we getting it from base context instead of cloning from the super Fragment's LayoutInflater.
+      componentContext = FragmentComponentManager.createContextWrapper(super.getContext(), this);
+    }
+  }
+
+  @Override
+  public Context getContext() {
+    if (super.getContext() == null && componentContext == null) {
+      return null;
+    }
+    initializeComponentContext();
+    return componentContext;
+  }
+
+  @Override
+  public LayoutInflater onGetLayoutInflater(Bundle savedInstanceState) {
+    LayoutInflater inflater = super.onGetLayoutInflater(savedInstanceState);
+    return LayoutInflater.from(FragmentComponentManager.createContextWrapper(inflater, this));
+  }
+
+  @Override
+  public final Object generatedComponent() {
+    return this.componentManager().generatedComponent();
+  }
+
+  protected FragmentComponentManager createComponentManager() {
+    return new FragmentComponentManager(this);
+  }
+
+  @Override
+  public final FragmentComponentManager componentManager() {
+    if (componentManager == null) {
+      synchronized (componentManagerLock) {
+        if (componentManager == null) {
+          componentManager = createComponentManager();
+        }
+      }
+    }
+    return componentManager;
+  }
+
+  protected void inject() {
+    if (!injected) {
+      injected = true;
+      ((ArcadeFragment_GeneratedInjector) this.generatedComponent()).injectArcadeFragment(UnsafeCasts.<ArcadeFragment>unsafeCast(this));
+    }
+  }
+
+  @Override
+  public ViewModelProvider.Factory getDefaultViewModelProviderFactory() {
+    return DefaultViewModelFactories.getFragmentFactory(this, super.getDefaultViewModelProviderFactory());
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/arcade/ArcadeFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/arcade/ArcadeFragment_GeneratedInjector.java	(date 1628686170385)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/arcade/ArcadeFragment_GeneratedInjector.java	(date 1628686170385)
@@ -0,0 +1,15 @@
+package com.test.dummyappv3.ui.arcade;
+
+import dagger.hilt.InstallIn;
+import dagger.hilt.android.components.FragmentComponent;
+import dagger.hilt.codegen.OriginatingElement;
+import dagger.hilt.internal.GeneratedEntryPoint;
+
+@OriginatingElement(
+    topLevelClass = ArcadeFragment.class
+)
+@GeneratedEntryPoint
+@InstallIn(FragmentComponent.class)
+public interface ArcadeFragment_GeneratedInjector {
+  void injectArcadeFragment(ArcadeFragment arcadeFragment);
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/sports/Hilt_SportsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/sports/Hilt_SportsFragment.java	(date 1628686170463)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/sports/Hilt_SportsFragment.java	(date 1628686170463)
@@ -0,0 +1,114 @@
+package com.test.dummyappv3.ui.sports;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.ContextWrapper;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import androidx.annotation.CallSuper;
+import androidx.annotation.MainThread;
+import androidx.fragment.app.Fragment;
+import androidx.lifecycle.ViewModelProvider;
+import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
+import dagger.hilt.android.internal.managers.FragmentComponentManager;
+import dagger.hilt.internal.GeneratedComponentManagerHolder;
+import dagger.hilt.internal.Preconditions;
+import dagger.hilt.internal.UnsafeCasts;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+
+/**
+ * A generated base class to be extended by the @dagger.hilt.android.AndroidEntryPoint annotated class. If using the Gradle plugin, this is swapped as the base class via bytecode transformation.
+ */
+@SuppressWarnings("deprecation")
+abstract class Hilt_SportsFragment extends Fragment implements GeneratedComponentManagerHolder {
+  private ContextWrapper componentContext;
+
+  private volatile FragmentComponentManager componentManager;
+
+  private final Object componentManagerLock = new Object();
+
+  private boolean injected = false;
+
+  Hilt_SportsFragment() {
+    super();
+  }
+
+  Hilt_SportsFragment(int contentLayoutId) {
+    super(contentLayoutId);
+  }
+
+  @Override
+  @CallSuper
+  public void onAttach(Context context) {
+    super.onAttach(context);
+    initializeComponentContext();
+    inject();
+  }
+
+  @Override
+  @CallSuper
+  @MainThread
+  public void onAttach(Activity activity) {
+    super.onAttach(activity);
+    Preconditions.checkState(componentContext == null || FragmentComponentManager.findActivity(componentContext) == activity, "onAttach called multiple times with different Context! Hilt Fragments should not be retained.");
+    initializeComponentContext();
+    inject();
+  }
+
+  private void initializeComponentContext() {
+    if (componentContext == null) {
+      // Note: The LayoutInflater provided by this componentContext may be different from super Fragment's because we getting it from base context instead of cloning from the super Fragment's LayoutInflater.
+      componentContext = FragmentComponentManager.createContextWrapper(super.getContext(), this);
+    }
+  }
+
+  @Override
+  public Context getContext() {
+    if (super.getContext() == null && componentContext == null) {
+      return null;
+    }
+    initializeComponentContext();
+    return componentContext;
+  }
+
+  @Override
+  public LayoutInflater onGetLayoutInflater(Bundle savedInstanceState) {
+    LayoutInflater inflater = super.onGetLayoutInflater(savedInstanceState);
+    return LayoutInflater.from(FragmentComponentManager.createContextWrapper(inflater, this));
+  }
+
+  @Override
+  public final Object generatedComponent() {
+    return this.componentManager().generatedComponent();
+  }
+
+  protected FragmentComponentManager createComponentManager() {
+    return new FragmentComponentManager(this);
+  }
+
+  @Override
+  public final FragmentComponentManager componentManager() {
+    if (componentManager == null) {
+      synchronized (componentManagerLock) {
+        if (componentManager == null) {
+          componentManager = createComponentManager();
+        }
+      }
+    }
+    return componentManager;
+  }
+
+  protected void inject() {
+    if (!injected) {
+      injected = true;
+      ((SportsFragment_GeneratedInjector) this.generatedComponent()).injectSportsFragment(UnsafeCasts.<SportsFragment>unsafeCast(this));
+    }
+  }
+
+  @Override
+  public ViewModelProvider.Factory getDefaultViewModelProviderFactory() {
+    return DefaultViewModelFactories.getFragmentFactory(this, super.getDefaultViewModelProviderFactory());
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/sports/SportsFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/sports/SportsFragment_GeneratedInjector.java	(date 1628686170458)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/sports/SportsFragment_GeneratedInjector.java	(date 1628686170458)
@@ -0,0 +1,15 @@
+package com.test.dummyappv3.ui.sports;
+
+import dagger.hilt.InstallIn;
+import dagger.hilt.android.components.FragmentComponent;
+import dagger.hilt.codegen.OriginatingElement;
+import dagger.hilt.internal.GeneratedEntryPoint;
+
+@OriginatingElement(
+    topLevelClass = SportsFragment.class
+)
+@GeneratedEntryPoint
+@InstallIn(FragmentComponent.class)
+public interface SportsFragment_GeneratedInjector {
+  void injectSportsFragment(SportsFragment sportsFragment);
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/fashion/Hilt_FashionFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/fashion/Hilt_FashionFragment.java	(date 1628686170402)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/fashion/Hilt_FashionFragment.java	(date 1628686170402)
@@ -0,0 +1,114 @@
+package com.test.dummyappv3.ui.fashion;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.ContextWrapper;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import androidx.annotation.CallSuper;
+import androidx.annotation.MainThread;
+import androidx.fragment.app.Fragment;
+import androidx.lifecycle.ViewModelProvider;
+import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
+import dagger.hilt.android.internal.managers.FragmentComponentManager;
+import dagger.hilt.internal.GeneratedComponentManagerHolder;
+import dagger.hilt.internal.Preconditions;
+import dagger.hilt.internal.UnsafeCasts;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+
+/**
+ * A generated base class to be extended by the @dagger.hilt.android.AndroidEntryPoint annotated class. If using the Gradle plugin, this is swapped as the base class via bytecode transformation.
+ */
+@SuppressWarnings("deprecation")
+abstract class Hilt_FashionFragment extends Fragment implements GeneratedComponentManagerHolder {
+  private ContextWrapper componentContext;
+
+  private volatile FragmentComponentManager componentManager;
+
+  private final Object componentManagerLock = new Object();
+
+  private boolean injected = false;
+
+  Hilt_FashionFragment() {
+    super();
+  }
+
+  Hilt_FashionFragment(int contentLayoutId) {
+    super(contentLayoutId);
+  }
+
+  @Override
+  @CallSuper
+  public void onAttach(Context context) {
+    super.onAttach(context);
+    initializeComponentContext();
+    inject();
+  }
+
+  @Override
+  @CallSuper
+  @MainThread
+  public void onAttach(Activity activity) {
+    super.onAttach(activity);
+    Preconditions.checkState(componentContext == null || FragmentComponentManager.findActivity(componentContext) == activity, "onAttach called multiple times with different Context! Hilt Fragments should not be retained.");
+    initializeComponentContext();
+    inject();
+  }
+
+  private void initializeComponentContext() {
+    if (componentContext == null) {
+      // Note: The LayoutInflater provided by this componentContext may be different from super Fragment's because we getting it from base context instead of cloning from the super Fragment's LayoutInflater.
+      componentContext = FragmentComponentManager.createContextWrapper(super.getContext(), this);
+    }
+  }
+
+  @Override
+  public Context getContext() {
+    if (super.getContext() == null && componentContext == null) {
+      return null;
+    }
+    initializeComponentContext();
+    return componentContext;
+  }
+
+  @Override
+  public LayoutInflater onGetLayoutInflater(Bundle savedInstanceState) {
+    LayoutInflater inflater = super.onGetLayoutInflater(savedInstanceState);
+    return LayoutInflater.from(FragmentComponentManager.createContextWrapper(inflater, this));
+  }
+
+  @Override
+  public final Object generatedComponent() {
+    return this.componentManager().generatedComponent();
+  }
+
+  protected FragmentComponentManager createComponentManager() {
+    return new FragmentComponentManager(this);
+  }
+
+  @Override
+  public final FragmentComponentManager componentManager() {
+    if (componentManager == null) {
+      synchronized (componentManagerLock) {
+        if (componentManager == null) {
+          componentManager = createComponentManager();
+        }
+      }
+    }
+    return componentManager;
+  }
+
+  protected void inject() {
+    if (!injected) {
+      injected = true;
+      ((FashionFragment_GeneratedInjector) this.generatedComponent()).injectFashionFragment(UnsafeCasts.<FashionFragment>unsafeCast(this));
+    }
+  }
+
+  @Override
+  public ViewModelProvider.Factory getDefaultViewModelProviderFactory() {
+    return DefaultViewModelFactories.getFragmentFactory(this, super.getDefaultViewModelProviderFactory());
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/fashion/FashionFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/fashion/FashionFragment_GeneratedInjector.java	(date 1628686170395)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/fashion/FashionFragment_GeneratedInjector.java	(date 1628686170395)
@@ -0,0 +1,15 @@
+package com.test.dummyappv3.ui.fashion;
+
+import dagger.hilt.InstallIn;
+import dagger.hilt.android.components.FragmentComponent;
+import dagger.hilt.codegen.OriginatingElement;
+import dagger.hilt.internal.GeneratedEntryPoint;
+
+@OriginatingElement(
+    topLevelClass = FashionFragment.class
+)
+@GeneratedEntryPoint
+@InstallIn(FragmentComponent.class)
+public interface FashionFragment_GeneratedInjector {
+  void injectFashionFragment(FashionFragment fashionFragment);
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/accessory/Hilt_AccessoryFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/accessory/Hilt_AccessoryFragment.java	(date 1628686170381)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/accessory/Hilt_AccessoryFragment.java	(date 1628686170381)
@@ -0,0 +1,114 @@
+package com.test.dummyappv3.ui.accessory;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.ContextWrapper;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import androidx.annotation.CallSuper;
+import androidx.annotation.MainThread;
+import androidx.fragment.app.Fragment;
+import androidx.lifecycle.ViewModelProvider;
+import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
+import dagger.hilt.android.internal.managers.FragmentComponentManager;
+import dagger.hilt.internal.GeneratedComponentManagerHolder;
+import dagger.hilt.internal.Preconditions;
+import dagger.hilt.internal.UnsafeCasts;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+
+/**
+ * A generated base class to be extended by the @dagger.hilt.android.AndroidEntryPoint annotated class. If using the Gradle plugin, this is swapped as the base class via bytecode transformation.
+ */
+@SuppressWarnings("deprecation")
+abstract class Hilt_AccessoryFragment extends Fragment implements GeneratedComponentManagerHolder {
+  private ContextWrapper componentContext;
+
+  private volatile FragmentComponentManager componentManager;
+
+  private final Object componentManagerLock = new Object();
+
+  private boolean injected = false;
+
+  Hilt_AccessoryFragment() {
+    super();
+  }
+
+  Hilt_AccessoryFragment(int contentLayoutId) {
+    super(contentLayoutId);
+  }
+
+  @Override
+  @CallSuper
+  public void onAttach(Context context) {
+    super.onAttach(context);
+    initializeComponentContext();
+    inject();
+  }
+
+  @Override
+  @CallSuper
+  @MainThread
+  public void onAttach(Activity activity) {
+    super.onAttach(activity);
+    Preconditions.checkState(componentContext == null || FragmentComponentManager.findActivity(componentContext) == activity, "onAttach called multiple times with different Context! Hilt Fragments should not be retained.");
+    initializeComponentContext();
+    inject();
+  }
+
+  private void initializeComponentContext() {
+    if (componentContext == null) {
+      // Note: The LayoutInflater provided by this componentContext may be different from super Fragment's because we getting it from base context instead of cloning from the super Fragment's LayoutInflater.
+      componentContext = FragmentComponentManager.createContextWrapper(super.getContext(), this);
+    }
+  }
+
+  @Override
+  public Context getContext() {
+    if (super.getContext() == null && componentContext == null) {
+      return null;
+    }
+    initializeComponentContext();
+    return componentContext;
+  }
+
+  @Override
+  public LayoutInflater onGetLayoutInflater(Bundle savedInstanceState) {
+    LayoutInflater inflater = super.onGetLayoutInflater(savedInstanceState);
+    return LayoutInflater.from(FragmentComponentManager.createContextWrapper(inflater, this));
+  }
+
+  @Override
+  public final Object generatedComponent() {
+    return this.componentManager().generatedComponent();
+  }
+
+  protected FragmentComponentManager createComponentManager() {
+    return new FragmentComponentManager(this);
+  }
+
+  @Override
+  public final FragmentComponentManager componentManager() {
+    if (componentManager == null) {
+      synchronized (componentManagerLock) {
+        if (componentManager == null) {
+          componentManager = createComponentManager();
+        }
+      }
+    }
+    return componentManager;
+  }
+
+  protected void inject() {
+    if (!injected) {
+      injected = true;
+      ((AccessoryFragment_GeneratedInjector) this.generatedComponent()).injectAccessoryFragment(UnsafeCasts.<AccessoryFragment>unsafeCast(this));
+    }
+  }
+
+  @Override
+  public ViewModelProvider.Factory getDefaultViewModelProviderFactory() {
+    return DefaultViewModelFactories.getFragmentFactory(this, super.getDefaultViewModelProviderFactory());
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/accessory/AccessoryFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/accessory/AccessoryFragment_GeneratedInjector.java	(date 1628686170367)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/accessory/AccessoryFragment_GeneratedInjector.java	(date 1628686170367)
@@ -0,0 +1,15 @@
+package com.test.dummyappv3.ui.accessory;
+
+import dagger.hilt.InstallIn;
+import dagger.hilt.android.components.FragmentComponent;
+import dagger.hilt.codegen.OriginatingElement;
+import dagger.hilt.internal.GeneratedEntryPoint;
+
+@OriginatingElement(
+    topLevelClass = AccessoryFragment.class
+)
+@GeneratedEntryPoint
+@InstallIn(FragmentComponent.class)
+public interface AccessoryFragment_GeneratedInjector {
+  void injectAccessoryFragment(AccessoryFragment accessoryFragment);
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/lifestyle/Hilt_LifestyleFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/lifestyle/Hilt_LifestyleFragment.java	(date 1628686170443)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/lifestyle/Hilt_LifestyleFragment.java	(date 1628686170443)
@@ -0,0 +1,114 @@
+package com.test.dummyappv3.ui.lifestyle;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.ContextWrapper;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import androidx.annotation.CallSuper;
+import androidx.annotation.MainThread;
+import androidx.fragment.app.Fragment;
+import androidx.lifecycle.ViewModelProvider;
+import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
+import dagger.hilt.android.internal.managers.FragmentComponentManager;
+import dagger.hilt.internal.GeneratedComponentManagerHolder;
+import dagger.hilt.internal.Preconditions;
+import dagger.hilt.internal.UnsafeCasts;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+
+/**
+ * A generated base class to be extended by the @dagger.hilt.android.AndroidEntryPoint annotated class. If using the Gradle plugin, this is swapped as the base class via bytecode transformation.
+ */
+@SuppressWarnings("deprecation")
+abstract class Hilt_LifestyleFragment extends Fragment implements GeneratedComponentManagerHolder {
+  private ContextWrapper componentContext;
+
+  private volatile FragmentComponentManager componentManager;
+
+  private final Object componentManagerLock = new Object();
+
+  private boolean injected = false;
+
+  Hilt_LifestyleFragment() {
+    super();
+  }
+
+  Hilt_LifestyleFragment(int contentLayoutId) {
+    super(contentLayoutId);
+  }
+
+  @Override
+  @CallSuper
+  public void onAttach(Context context) {
+    super.onAttach(context);
+    initializeComponentContext();
+    inject();
+  }
+
+  @Override
+  @CallSuper
+  @MainThread
+  public void onAttach(Activity activity) {
+    super.onAttach(activity);
+    Preconditions.checkState(componentContext == null || FragmentComponentManager.findActivity(componentContext) == activity, "onAttach called multiple times with different Context! Hilt Fragments should not be retained.");
+    initializeComponentContext();
+    inject();
+  }
+
+  private void initializeComponentContext() {
+    if (componentContext == null) {
+      // Note: The LayoutInflater provided by this componentContext may be different from super Fragment's because we getting it from base context instead of cloning from the super Fragment's LayoutInflater.
+      componentContext = FragmentComponentManager.createContextWrapper(super.getContext(), this);
+    }
+  }
+
+  @Override
+  public Context getContext() {
+    if (super.getContext() == null && componentContext == null) {
+      return null;
+    }
+    initializeComponentContext();
+    return componentContext;
+  }
+
+  @Override
+  public LayoutInflater onGetLayoutInflater(Bundle savedInstanceState) {
+    LayoutInflater inflater = super.onGetLayoutInflater(savedInstanceState);
+    return LayoutInflater.from(FragmentComponentManager.createContextWrapper(inflater, this));
+  }
+
+  @Override
+  public final Object generatedComponent() {
+    return this.componentManager().generatedComponent();
+  }
+
+  protected FragmentComponentManager createComponentManager() {
+    return new FragmentComponentManager(this);
+  }
+
+  @Override
+  public final FragmentComponentManager componentManager() {
+    if (componentManager == null) {
+      synchronized (componentManagerLock) {
+        if (componentManager == null) {
+          componentManager = createComponentManager();
+        }
+      }
+    }
+    return componentManager;
+  }
+
+  protected void inject() {
+    if (!injected) {
+      injected = true;
+      ((LifestyleFragment_GeneratedInjector) this.generatedComponent()).injectLifestyleFragment(UnsafeCasts.<LifestyleFragment>unsafeCast(this));
+    }
+  }
+
+  @Override
+  public ViewModelProvider.Factory getDefaultViewModelProviderFactory() {
+    return DefaultViewModelFactories.getFragmentFactory(this, super.getDefaultViewModelProviderFactory());
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/lifestyle/LifestyleFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/lifestyle/LifestyleFragment_GeneratedInjector.java	(date 1628686170439)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/ui/lifestyle/LifestyleFragment_GeneratedInjector.java	(date 1628686170439)
@@ -0,0 +1,15 @@
+package com.test.dummyappv3.ui.lifestyle;
+
+import dagger.hilt.InstallIn;
+import dagger.hilt.android.components.FragmentComponent;
+import dagger.hilt.codegen.OriginatingElement;
+import dagger.hilt.internal.GeneratedEntryPoint;
+
+@OriginatingElement(
+    topLevelClass = LifestyleFragment.class
+)
+@GeneratedEntryPoint
+@InstallIn(FragmentComponent.class)
+public interface LifestyleFragment_GeneratedInjector {
+  void injectLifestyleFragment(LifestyleFragment lifestyleFragment);
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/database/ItemDAO_Impl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/database/ItemDAO_Impl.java	(date 1628686170156)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/database/ItemDAO_Impl.java	(date 1628686170156)
@@ -0,0 +1,214 @@
+package com.test.dummyappv3.data.database;
+
+import android.database.Cursor;
+import androidx.lifecycle.LiveData;
+import androidx.room.EntityInsertionAdapter;
+import androidx.room.RoomDatabase;
+import androidx.room.RoomSQLiteQuery;
+import androidx.room.util.CursorUtil;
+import androidx.room.util.DBUtil;
+import androidx.sqlite.db.SupportSQLiteStatement;
+import com.test.dummyappv3.pojo.Item;
+import io.reactivex.rxjava3.core.Completable;
+import java.lang.Class;
+import java.lang.Exception;
+import java.lang.Override;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.lang.Void;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.concurrent.Callable;
+
+@SuppressWarnings({"unchecked", "deprecation"})
+public final class ItemDAO_Impl implements ItemDAO {
+  private final RoomDatabase __db;
+
+  private final EntityInsertionAdapter<Item> __insertionAdapterOfItem;
+
+  public ItemDAO_Impl(RoomDatabase __db) {
+    this.__db = __db;
+    this.__insertionAdapterOfItem = new EntityInsertionAdapter<Item>(__db) {
+      @Override
+      public String createQuery() {
+        return "INSERT OR ABORT INTO `item_table` (`reDefinedID`,`kind`,`id`,`published`,`updated`,`etag`,`url`,`selfLink`,`title`,`content`) VALUES (nullif(?, 0),?,?,?,?,?,?,?,?,?)";
+      }
+
+      @Override
+      public void bind(SupportSQLiteStatement stmt, Item value) {
+        stmt.bindLong(1, value.getReDefinedID());
+        if (value.getKind() == null) {
+          stmt.bindNull(2);
+        } else {
+          stmt.bindString(2, value.getKind());
+        }
+        if (value.getId() == null) {
+          stmt.bindNull(3);
+        } else {
+          stmt.bindString(3, value.getId());
+        }
+        if (value.getPublished() == null) {
+          stmt.bindNull(4);
+        } else {
+          stmt.bindString(4, value.getPublished());
+        }
+        if (value.getUpdated() == null) {
+          stmt.bindNull(5);
+        } else {
+          stmt.bindString(5, value.getUpdated());
+        }
+        if (value.getEtag() == null) {
+          stmt.bindNull(6);
+        } else {
+          stmt.bindString(6, value.getEtag());
+        }
+        if (value.getUrl() == null) {
+          stmt.bindNull(7);
+        } else {
+          stmt.bindString(7, value.getUrl());
+        }
+        if (value.getSelfLink() == null) {
+          stmt.bindNull(8);
+        } else {
+          stmt.bindString(8, value.getSelfLink());
+        }
+        if (value.getTitle() == null) {
+          stmt.bindNull(9);
+        } else {
+          stmt.bindString(9, value.getTitle());
+        }
+        if (value.getContent() == null) {
+          stmt.bindNull(10);
+        } else {
+          stmt.bindString(10, value.getContent());
+        }
+      }
+    };
+  }
+
+  @Override
+  public Completable insert(final Item item) {
+    return Completable.fromCallable(new Callable<Void>() {
+      @Override
+      public Void call() throws Exception {
+        __db.beginTransaction();
+        try {
+          __insertionAdapterOfItem.insert(item);
+          __db.setTransactionSuccessful();
+          return null;
+        } finally {
+          __db.endTransaction();
+        }
+      }
+    });
+  }
+
+  @Override
+  public LiveData<List<Item>> getAlItems() {
+    final String _sql = "SELECT * FROM item_table";
+    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
+    return __db.getInvalidationTracker().createLiveData(new String[]{"item_table"}, false, new Callable<List<Item>>() {
+      @Override
+      public List<Item> call() throws Exception {
+        final Cursor _cursor = DBUtil.query(__db, _statement, false, null);
+        try {
+          final int _cursorIndexOfReDefinedID = CursorUtil.getColumnIndexOrThrow(_cursor, "reDefinedID");
+          final int _cursorIndexOfKind = CursorUtil.getColumnIndexOrThrow(_cursor, "kind");
+          final int _cursorIndexOfId = CursorUtil.getColumnIndexOrThrow(_cursor, "id");
+          final int _cursorIndexOfPublished = CursorUtil.getColumnIndexOrThrow(_cursor, "published");
+          final int _cursorIndexOfUpdated = CursorUtil.getColumnIndexOrThrow(_cursor, "updated");
+          final int _cursorIndexOfEtag = CursorUtil.getColumnIndexOrThrow(_cursor, "etag");
+          final int _cursorIndexOfUrl = CursorUtil.getColumnIndexOrThrow(_cursor, "url");
+          final int _cursorIndexOfSelfLink = CursorUtil.getColumnIndexOrThrow(_cursor, "selfLink");
+          final int _cursorIndexOfTitle = CursorUtil.getColumnIndexOrThrow(_cursor, "title");
+          final int _cursorIndexOfContent = CursorUtil.getColumnIndexOrThrow(_cursor, "content");
+          final List<Item> _result = new ArrayList<Item>(_cursor.getCount());
+          while(_cursor.moveToNext()) {
+            final Item _item;
+            _item = new Item();
+            final int _tmpReDefinedID;
+            _tmpReDefinedID = _cursor.getInt(_cursorIndexOfReDefinedID);
+            _item.setReDefinedID(_tmpReDefinedID);
+            final String _tmpKind;
+            if (_cursor.isNull(_cursorIndexOfKind)) {
+              _tmpKind = null;
+            } else {
+              _tmpKind = _cursor.getString(_cursorIndexOfKind);
+            }
+            _item.setKind(_tmpKind);
+            final String _tmpId;
+            if (_cursor.isNull(_cursorIndexOfId)) {
+              _tmpId = null;
+            } else {
+              _tmpId = _cursor.getString(_cursorIndexOfId);
+            }
+            _item.setId(_tmpId);
+            final String _tmpPublished;
+            if (_cursor.isNull(_cursorIndexOfPublished)) {
+              _tmpPublished = null;
+            } else {
+              _tmpPublished = _cursor.getString(_cursorIndexOfPublished);
+            }
+            _item.setPublished(_tmpPublished);
+            final String _tmpUpdated;
+            if (_cursor.isNull(_cursorIndexOfUpdated)) {
+              _tmpUpdated = null;
+            } else {
+              _tmpUpdated = _cursor.getString(_cursorIndexOfUpdated);
+            }
+            _item.setUpdated(_tmpUpdated);
+            final String _tmpEtag;
+            if (_cursor.isNull(_cursorIndexOfEtag)) {
+              _tmpEtag = null;
+            } else {
+              _tmpEtag = _cursor.getString(_cursorIndexOfEtag);
+            }
+            _item.setEtag(_tmpEtag);
+            final String _tmpUrl;
+            if (_cursor.isNull(_cursorIndexOfUrl)) {
+              _tmpUrl = null;
+            } else {
+              _tmpUrl = _cursor.getString(_cursorIndexOfUrl);
+            }
+            _item.setUrl(_tmpUrl);
+            final String _tmpSelfLink;
+            if (_cursor.isNull(_cursorIndexOfSelfLink)) {
+              _tmpSelfLink = null;
+            } else {
+              _tmpSelfLink = _cursor.getString(_cursorIndexOfSelfLink);
+            }
+            _item.setSelfLink(_tmpSelfLink);
+            final String _tmpTitle;
+            if (_cursor.isNull(_cursorIndexOfTitle)) {
+              _tmpTitle = null;
+            } else {
+              _tmpTitle = _cursor.getString(_cursorIndexOfTitle);
+            }
+            _item.setTitle(_tmpTitle);
+            final String _tmpContent;
+            if (_cursor.isNull(_cursorIndexOfContent)) {
+              _tmpContent = null;
+            } else {
+              _tmpContent = _cursor.getString(_cursorIndexOfContent);
+            }
+            _item.setContent(_tmpContent);
+            _result.add(_item);
+          }
+          return _result;
+        } finally {
+          _cursor.close();
+        }
+      }
+
+      @Override
+      protected void finalize() {
+        _statement.release();
+      }
+    });
+  }
+
+  public static List<Class<?>> getRequiredConverters() {
+    return Collections.emptyList();
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/database/ItemsDatabase_Impl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/database/ItemsDatabase_Impl.java	(date 1628686170181)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/database/ItemsDatabase_Impl.java	(date 1628686170181)
@@ -0,0 +1,157 @@
+package com.test.dummyappv3.data.database;
+
+import androidx.room.DatabaseConfiguration;
+import androidx.room.InvalidationTracker;
+import androidx.room.RoomOpenHelper;
+import androidx.room.RoomOpenHelper.Delegate;
+import androidx.room.RoomOpenHelper.ValidationResult;
+import androidx.room.util.DBUtil;
+import androidx.room.util.TableInfo;
+import androidx.room.util.TableInfo.Column;
+import androidx.room.util.TableInfo.ForeignKey;
+import androidx.room.util.TableInfo.Index;
+import androidx.sqlite.db.SupportSQLiteDatabase;
+import androidx.sqlite.db.SupportSQLiteOpenHelper;
+import androidx.sqlite.db.SupportSQLiteOpenHelper.Callback;
+import androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration;
+import java.lang.Class;
+import java.lang.Override;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+@SuppressWarnings({"unchecked", "deprecation"})
+public final class ItemsDatabase_Impl extends ItemsDatabase {
+  private volatile ItemDAO _itemDAO;
+
+  @Override
+  protected SupportSQLiteOpenHelper createOpenHelper(DatabaseConfiguration configuration) {
+    final SupportSQLiteOpenHelper.Callback _openCallback = new RoomOpenHelper(configuration, new RoomOpenHelper.Delegate(1) {
+      @Override
+      public void createAllTables(SupportSQLiteDatabase _db) {
+        _db.execSQL("CREATE TABLE IF NOT EXISTS `item_table` (`reDefinedID` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `kind` TEXT, `id` TEXT, `published` TEXT, `updated` TEXT, `etag` TEXT, `url` TEXT, `selfLink` TEXT, `title` TEXT, `content` TEXT)");
+        _db.execSQL("CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)");
+        _db.execSQL("INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, 'cf16aee60677c84931ba515d86f0d6ca')");
+      }
+
+      @Override
+      public void dropAllTables(SupportSQLiteDatabase _db) {
+        _db.execSQL("DROP TABLE IF EXISTS `item_table`");
+        if (mCallbacks != null) {
+          for (int _i = 0, _size = mCallbacks.size(); _i < _size; _i++) {
+            mCallbacks.get(_i).onDestructiveMigration(_db);
+          }
+        }
+      }
+
+      @Override
+      protected void onCreate(SupportSQLiteDatabase _db) {
+        if (mCallbacks != null) {
+          for (int _i = 0, _size = mCallbacks.size(); _i < _size; _i++) {
+            mCallbacks.get(_i).onCreate(_db);
+          }
+        }
+      }
+
+      @Override
+      public void onOpen(SupportSQLiteDatabase _db) {
+        mDatabase = _db;
+        internalInitInvalidationTracker(_db);
+        if (mCallbacks != null) {
+          for (int _i = 0, _size = mCallbacks.size(); _i < _size; _i++) {
+            mCallbacks.get(_i).onOpen(_db);
+          }
+        }
+      }
+
+      @Override
+      public void onPreMigrate(SupportSQLiteDatabase _db) {
+        DBUtil.dropFtsSyncTriggers(_db);
+      }
+
+      @Override
+      public void onPostMigrate(SupportSQLiteDatabase _db) {
+      }
+
+      @Override
+      protected RoomOpenHelper.ValidationResult onValidateSchema(SupportSQLiteDatabase _db) {
+        final HashMap<String, TableInfo.Column> _columnsItemTable = new HashMap<String, TableInfo.Column>(10);
+        _columnsItemTable.put("reDefinedID", new TableInfo.Column("reDefinedID", "INTEGER", true, 1, null, TableInfo.CREATED_FROM_ENTITY));
+        _columnsItemTable.put("kind", new TableInfo.Column("kind", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
+        _columnsItemTable.put("id", new TableInfo.Column("id", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
+        _columnsItemTable.put("published", new TableInfo.Column("published", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
+        _columnsItemTable.put("updated", new TableInfo.Column("updated", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
+        _columnsItemTable.put("etag", new TableInfo.Column("etag", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
+        _columnsItemTable.put("url", new TableInfo.Column("url", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
+        _columnsItemTable.put("selfLink", new TableInfo.Column("selfLink", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
+        _columnsItemTable.put("title", new TableInfo.Column("title", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
+        _columnsItemTable.put("content", new TableInfo.Column("content", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
+        final HashSet<TableInfo.ForeignKey> _foreignKeysItemTable = new HashSet<TableInfo.ForeignKey>(0);
+        final HashSet<TableInfo.Index> _indicesItemTable = new HashSet<TableInfo.Index>(0);
+        final TableInfo _infoItemTable = new TableInfo("item_table", _columnsItemTable, _foreignKeysItemTable, _indicesItemTable);
+        final TableInfo _existingItemTable = TableInfo.read(_db, "item_table");
+        if (! _infoItemTable.equals(_existingItemTable)) {
+          return new RoomOpenHelper.ValidationResult(false, "item_table(com.test.dummyappv3.pojo.Item).\n"
+                  + " Expected:\n" + _infoItemTable + "\n"
+                  + " Found:\n" + _existingItemTable);
+        }
+        return new RoomOpenHelper.ValidationResult(true, null);
+      }
+    }, "cf16aee60677c84931ba515d86f0d6ca", "6ff78476b9450335670fe46dfe28a297");
+    final SupportSQLiteOpenHelper.Configuration _sqliteConfig = SupportSQLiteOpenHelper.Configuration.builder(configuration.context)
+        .name(configuration.name)
+        .callback(_openCallback)
+        .build();
+    final SupportSQLiteOpenHelper _helper = configuration.sqliteOpenHelperFactory.create(_sqliteConfig);
+    return _helper;
+  }
+
+  @Override
+  protected InvalidationTracker createInvalidationTracker() {
+    final HashMap<String, String> _shadowTablesMap = new HashMap<String, String>(0);
+    HashMap<String, Set<String>> _viewTables = new HashMap<String, Set<String>>(0);
+    return new InvalidationTracker(this, _shadowTablesMap, _viewTables, "item_table");
+  }
+
+  @Override
+  public void clearAllTables() {
+    super.assertNotMainThread();
+    final SupportSQLiteDatabase _db = super.getOpenHelper().getWritableDatabase();
+    try {
+      super.beginTransaction();
+      _db.execSQL("DELETE FROM `item_table`");
+      super.setTransactionSuccessful();
+    } finally {
+      super.endTransaction();
+      _db.query("PRAGMA wal_checkpoint(FULL)").close();
+      if (!_db.inTransaction()) {
+        _db.execSQL("VACUUM");
+      }
+    }
+  }
+
+  @Override
+  protected Map<Class<?>, List<Class<?>>> getRequiredTypeConverters() {
+    final HashMap<Class<?>, List<Class<?>>> _typeConvertersMap = new HashMap<Class<?>, List<Class<?>>>();
+    _typeConvertersMap.put(ItemDAO.class, ItemDAO_Impl.getRequiredConverters());
+    return _typeConvertersMap;
+  }
+
+  @Override
+  public ItemDAO itemDAO() {
+    if (_itemDAO != null) {
+      return _itemDAO;
+    } else {
+      synchronized(this) {
+        if(_itemDAO == null) {
+          _itemDAO = new ItemDAO_Impl(this);
+        }
+        return _itemDAO;
+      }
+    }
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/Repository_Factory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/Repository_Factory.java	(date 1628686170949)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/Repository_Factory.java	(date 1628686170949)
@@ -0,0 +1,38 @@
+// Generated by Dagger (https://dagger.dev).
+package com.test.dummyappv3.data;
+
+import dagger.internal.DaggerGenerated;
+import dagger.internal.Factory;
+import javax.inject.Provider;
+
+@DaggerGenerated
+@SuppressWarnings({
+    "unchecked",
+    "rawtypes"
+})
+public final class Repository_Factory implements Factory<Repository> {
+  private final Provider<RemoteDataSource> remoteDataSourceProvider;
+
+  private final Provider<LocalDataSource> localDataSourceProvider;
+
+  public Repository_Factory(Provider<RemoteDataSource> remoteDataSourceProvider,
+      Provider<LocalDataSource> localDataSourceProvider) {
+    this.remoteDataSourceProvider = remoteDataSourceProvider;
+    this.localDataSourceProvider = localDataSourceProvider;
+  }
+
+  @Override
+  public Repository get() {
+    return newInstance(remoteDataSourceProvider.get(), localDataSourceProvider.get());
+  }
+
+  public static Repository_Factory create(Provider<RemoteDataSource> remoteDataSourceProvider,
+      Provider<LocalDataSource> localDataSourceProvider) {
+    return new Repository_Factory(remoteDataSourceProvider, localDataSourceProvider);
+  }
+
+  public static Repository newInstance(RemoteDataSource remoteDataSource,
+      LocalDataSource localDataSource) {
+    return new Repository(remoteDataSource, localDataSource);
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/LocalDataSource_Factory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/LocalDataSource_Factory.java	(date 1628686170939)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/LocalDataSource_Factory.java	(date 1628686170939)
@@ -0,0 +1,33 @@
+// Generated by Dagger (https://dagger.dev).
+package com.test.dummyappv3.data;
+
+import com.test.dummyappv3.data.database.ItemDAO;
+import dagger.internal.DaggerGenerated;
+import dagger.internal.Factory;
+import javax.inject.Provider;
+
+@DaggerGenerated
+@SuppressWarnings({
+    "unchecked",
+    "rawtypes"
+})
+public final class LocalDataSource_Factory implements Factory<LocalDataSource> {
+  private final Provider<ItemDAO> itemDAOProvider;
+
+  public LocalDataSource_Factory(Provider<ItemDAO> itemDAOProvider) {
+    this.itemDAOProvider = itemDAOProvider;
+  }
+
+  @Override
+  public LocalDataSource get() {
+    return newInstance(itemDAOProvider.get());
+  }
+
+  public static LocalDataSource_Factory create(Provider<ItemDAO> itemDAOProvider) {
+    return new LocalDataSource_Factory(itemDAOProvider);
+  }
+
+  public static LocalDataSource newInstance(ItemDAO itemDAO) {
+    return new LocalDataSource(itemDAO);
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/RemoteDataSource_Factory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/RemoteDataSource_Factory.java	(date 1628686170943)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/data/RemoteDataSource_Factory.java	(date 1628686170943)
@@ -0,0 +1,33 @@
+// Generated by Dagger (https://dagger.dev).
+package com.test.dummyappv3.data;
+
+import com.test.dummyappv3.data.network.PostAPIService;
+import dagger.internal.DaggerGenerated;
+import dagger.internal.Factory;
+import javax.inject.Provider;
+
+@DaggerGenerated
+@SuppressWarnings({
+    "unchecked",
+    "rawtypes"
+})
+public final class RemoteDataSource_Factory implements Factory<RemoteDataSource> {
+  private final Provider<PostAPIService> postAPIServiceProvider;
+
+  public RemoteDataSource_Factory(Provider<PostAPIService> postAPIServiceProvider) {
+    this.postAPIServiceProvider = postAPIServiceProvider;
+  }
+
+  @Override
+  public RemoteDataSource get() {
+    return newInstance(postAPIServiceProvider.get());
+  }
+
+  public static RemoteDataSource_Factory create(Provider<PostAPIService> postAPIServiceProvider) {
+    return new RemoteDataSource_Factory(postAPIServiceProvider);
+  }
+
+  public static RemoteDataSource newInstance(PostAPIService postAPIService) {
+    return new RemoteDataSource(postAPIService);
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/viewmodels/PostViewModel_Factory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/viewmodels/PostViewModel_Factory.java	(date 1628686170953)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/viewmodels/PostViewModel_Factory.java	(date 1628686170953)
@@ -0,0 +1,33 @@
+// Generated by Dagger (https://dagger.dev).
+package com.test.dummyappv3.viewmodels;
+
+import com.test.dummyappv3.data.Repository;
+import dagger.internal.DaggerGenerated;
+import dagger.internal.Factory;
+import javax.inject.Provider;
+
+@DaggerGenerated
+@SuppressWarnings({
+    "unchecked",
+    "rawtypes"
+})
+public final class PostViewModel_Factory implements Factory<PostViewModel> {
+  private final Provider<Repository> repositoryProvider;
+
+  public PostViewModel_Factory(Provider<Repository> repositoryProvider) {
+    this.repositoryProvider = repositoryProvider;
+  }
+
+  @Override
+  public PostViewModel get() {
+    return newInstance(repositoryProvider.get());
+  }
+
+  public static PostViewModel_Factory create(Provider<Repository> repositoryProvider) {
+    return new PostViewModel_Factory(repositoryProvider);
+  }
+
+  public static PostViewModel newInstance(Repository repository) {
+    return new PostViewModel(repository);
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/viewmodels/PostViewModel_HiltModules.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/viewmodels/PostViewModel_HiltModules.java	(date 1628686170225)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/viewmodels/PostViewModel_HiltModules.java	(date 1628686170225)
@@ -0,0 +1,50 @@
+package com.test.dummyappv3.viewmodels;
+
+import androidx.lifecycle.ViewModel;
+import dagger.Binds;
+import dagger.Module;
+import dagger.Provides;
+import dagger.hilt.InstallIn;
+import dagger.hilt.android.components.ActivityRetainedComponent;
+import dagger.hilt.android.components.ViewModelComponent;
+import dagger.hilt.android.internal.lifecycle.HiltViewModelMap;
+import dagger.hilt.codegen.OriginatingElement;
+import dagger.multibindings.IntoMap;
+import dagger.multibindings.IntoSet;
+import dagger.multibindings.StringKey;
+import java.lang.String;
+
+@OriginatingElement(
+    topLevelClass = PostViewModel.class
+)
+public final class PostViewModel_HiltModules {
+  private PostViewModel_HiltModules() {
+  }
+
+  @Module
+  @InstallIn(ViewModelComponent.class)
+  public abstract static class BindsModule {
+    private BindsModule() {
+    }
+
+    @Binds
+    @IntoMap
+    @StringKey("com.test.dummyappv3.viewmodels.PostViewModel")
+    @HiltViewModelMap
+    public abstract ViewModel binds(PostViewModel vm);
+  }
+
+  @Module
+  @InstallIn(ActivityRetainedComponent.class)
+  public static final class KeyModule {
+    private KeyModule() {
+    }
+
+    @Provides
+    @IntoSet
+    @HiltViewModelMap.KeySet
+    public static String provide() {
+      return "com.test.dummyappv3.viewmodels.PostViewModel";
+    }
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/viewmodels/PostViewModel_HiltModules_KeyModule_ProvideFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/viewmodels/PostViewModel_HiltModules_KeyModule_ProvideFactory.java	(date 1628686171099)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/viewmodels/PostViewModel_HiltModules_KeyModule_ProvideFactory.java	(date 1628686171099)
@@ -0,0 +1,30 @@
+// Generated by Dagger (https://dagger.dev).
+package com.test.dummyappv3.viewmodels;
+
+import dagger.internal.DaggerGenerated;
+import dagger.internal.Factory;
+import dagger.internal.Preconditions;
+
+@DaggerGenerated
+@SuppressWarnings({
+    "unchecked",
+    "rawtypes"
+})
+public final class PostViewModel_HiltModules_KeyModule_ProvideFactory implements Factory<String> {
+  @Override
+  public String get() {
+    return provide();
+  }
+
+  public static PostViewModel_HiltModules_KeyModule_ProvideFactory create() {
+    return InstanceHolder.INSTANCE;
+  }
+
+  public static String provide() {
+    return Preconditions.checkNotNullFromProvides(PostViewModel_HiltModules.KeyModule.provide());
+  }
+
+  private static final class InstanceHolder {
+    private static final PostViewModel_HiltModules_KeyModule_ProvideFactory INSTANCE = new PostViewModel_HiltModules_KeyModule_ProvideFactory();
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/Hilt_BaseApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/Hilt_BaseApplication.java	(date 1628686170362)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/Hilt_BaseApplication.java	(date 1628686170362)
@@ -0,0 +1,44 @@
+package com.test.dummyappv3;
+
+import android.app.Application;
+import androidx.annotation.CallSuper;
+import dagger.hilt.android.internal.managers.ApplicationComponentManager;
+import dagger.hilt.android.internal.managers.ComponentSupplier;
+import dagger.hilt.android.internal.modules.ApplicationContextModule;
+import dagger.hilt.internal.GeneratedComponentManagerHolder;
+import dagger.hilt.internal.UnsafeCasts;
+import java.lang.Object;
+import java.lang.Override;
+
+/**
+ * A generated base class to be extended by the @dagger.hilt.android.HiltAndroidApp annotated class. If using the Gradle plugin, this is swapped as the base class via bytecode transformation.
+ */
+abstract class Hilt_BaseApplication extends Application implements GeneratedComponentManagerHolder {
+  private final ApplicationComponentManager componentManager = new ApplicationComponentManager(new ComponentSupplier() {
+    @Override
+    public Object get() {
+      return DaggerBaseApplication_HiltComponents_SingletonC.builder()
+          .applicationContextModule(new ApplicationContextModule(Hilt_BaseApplication.this))
+          .build();
+    }
+  });
+
+  @Override
+  public final ApplicationComponentManager componentManager() {
+    return componentManager;
+  }
+
+  @Override
+  public final Object generatedComponent() {
+    return this.componentManager().generatedComponent();
+  }
+
+  @CallSuper
+  @Override
+  public void onCreate() {
+    // This is a known unsafe cast, but is safe in the only correct use case:
+    // BaseApplication extends Hilt_BaseApplication
+    ((BaseApplication_GeneratedInjector) generatedComponent()).injectBaseApplication(UnsafeCasts.<BaseApplication>unsafeCast(this));
+    super.onCreate();
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/BaseApplication_HiltComponents.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/BaseApplication_HiltComponents.java	(date 1628686171462)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/BaseApplication_HiltComponents.java	(date 1628686171462)
@@ -0,0 +1,248 @@
+package com.test.dummyappv3;
+
+import androidx.hilt.lifecycle.ViewModelFactoryModules;
+import com.test.dummyappv3.di.DatabaseModule;
+import com.test.dummyappv3.di.NetworkModule;
+import com.test.dummyappv3.ui.accessory.AccessoryFragment_GeneratedInjector;
+import com.test.dummyappv3.ui.arcade.ArcadeFragment_GeneratedInjector;
+import com.test.dummyappv3.ui.fashion.FashionFragment_GeneratedInjector;
+import com.test.dummyappv3.ui.food.FoodFragment_GeneratedInjector;
+import com.test.dummyappv3.ui.heath.HeathFragment_GeneratedInjector;
+import com.test.dummyappv3.ui.home.HomeFragment_GeneratedInjector;
+import com.test.dummyappv3.ui.lifestyle.LifestyleFragment_GeneratedInjector;
+import com.test.dummyappv3.ui.main.MainActivity_GeneratedInjector;
+import com.test.dummyappv3.ui.sports.SportsFragment_GeneratedInjector;
+import com.test.dummyappv3.viewmodels.PostViewModel_HiltModules;
+import dagger.Binds;
+import dagger.Component;
+import dagger.Module;
+import dagger.Subcomponent;
+import dagger.hilt.android.components.ActivityComponent;
+import dagger.hilt.android.components.ActivityRetainedComponent;
+import dagger.hilt.android.components.FragmentComponent;
+import dagger.hilt.android.components.ServiceComponent;
+import dagger.hilt.android.components.ViewComponent;
+import dagger.hilt.android.components.ViewModelComponent;
+import dagger.hilt.android.components.ViewWithFragmentComponent;
+import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
+import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
+import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
+import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
+import dagger.hilt.android.internal.builders.ViewComponentBuilder;
+import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
+import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
+import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
+import dagger.hilt.android.internal.lifecycle.HiltViewModelFactory;
+import dagger.hilt.android.internal.lifecycle.HiltWrapper_DefaultViewModelFactories_ActivityModule;
+import dagger.hilt.android.internal.lifecycle.HiltWrapper_HiltViewModelFactory_ActivityCreatorEntryPoint;
+import dagger.hilt.android.internal.lifecycle.HiltWrapper_HiltViewModelFactory_ViewModelModule;
+import dagger.hilt.android.internal.managers.ActivityComponentManager;
+import dagger.hilt.android.internal.managers.FragmentComponentManager;
+import dagger.hilt.android.internal.managers.HiltWrapper_ActivityRetainedComponentManager_ActivityRetainedComponentBuilderEntryPoint;
+import dagger.hilt.android.internal.managers.HiltWrapper_ActivityRetainedComponentManager_ActivityRetainedLifecycleEntryPoint;
+import dagger.hilt.android.internal.managers.HiltWrapper_ActivityRetainedComponentManager_LifecycleModule;
+import dagger.hilt.android.internal.managers.ServiceComponentManager;
+import dagger.hilt.android.internal.managers.ViewComponentManager;
+import dagger.hilt.android.internal.modules.ApplicationContextModule;
+import dagger.hilt.android.internal.modules.HiltWrapper_ActivityModule;
+import dagger.hilt.android.scopes.ActivityRetainedScoped;
+import dagger.hilt.android.scopes.ActivityScoped;
+import dagger.hilt.android.scopes.FragmentScoped;
+import dagger.hilt.android.scopes.ServiceScoped;
+import dagger.hilt.android.scopes.ViewModelScoped;
+import dagger.hilt.android.scopes.ViewScoped;
+import dagger.hilt.components.SingletonComponent;
+import dagger.hilt.internal.GeneratedComponent;
+import dagger.hilt.migration.DisableInstallInCheck;
+import javax.inject.Singleton;
+
+public final class BaseApplication_HiltComponents {
+  private BaseApplication_HiltComponents() {
+  }
+
+  @Module(
+      subcomponents = ServiceC.class
+  )
+  @DisableInstallInCheck
+  abstract interface ServiceCBuilderModule {
+    @Binds
+    ServiceComponentBuilder bind(ServiceC.Builder builder);
+  }
+
+  @Module(
+      subcomponents = ActivityRetainedC.class
+  )
+  @DisableInstallInCheck
+  abstract interface ActivityRetainedCBuilderModule {
+    @Binds
+    ActivityRetainedComponentBuilder bind(ActivityRetainedC.Builder builder);
+  }
+
+  @Module(
+      subcomponents = ActivityC.class
+  )
+  @DisableInstallInCheck
+  abstract interface ActivityCBuilderModule {
+    @Binds
+    ActivityComponentBuilder bind(ActivityC.Builder builder);
+  }
+
+  @Module(
+      subcomponents = ViewModelC.class
+  )
+  @DisableInstallInCheck
+  abstract interface ViewModelCBuilderModule {
+    @Binds
+    ViewModelComponentBuilder bind(ViewModelC.Builder builder);
+  }
+
+  @Module(
+      subcomponents = ViewC.class
+  )
+  @DisableInstallInCheck
+  abstract interface ViewCBuilderModule {
+    @Binds
+    ViewComponentBuilder bind(ViewC.Builder builder);
+  }
+
+  @Module(
+      subcomponents = FragmentC.class
+  )
+  @DisableInstallInCheck
+  abstract interface FragmentCBuilderModule {
+    @Binds
+    FragmentComponentBuilder bind(FragmentC.Builder builder);
+  }
+
+  @Module(
+      subcomponents = ViewWithFragmentC.class
+  )
+  @DisableInstallInCheck
+  abstract interface ViewWithFragmentCBuilderModule {
+    @Binds
+    ViewWithFragmentComponentBuilder bind(ViewWithFragmentC.Builder builder);
+  }
+
+  @Component(
+      modules = {
+          ApplicationContextModule.class,
+          ActivityRetainedCBuilderModule.class,
+          ServiceCBuilderModule.class,
+          DatabaseModule.class,
+          NetworkModule.class
+      }
+  )
+  @Singleton
+  public abstract static class SingletonC implements BaseApplication_GeneratedInjector,
+      HiltWrapper_ActivityRetainedComponentManager_ActivityRetainedComponentBuilderEntryPoint,
+      ServiceComponentManager.ServiceComponentBuilderEntryPoint,
+      SingletonComponent,
+      GeneratedComponent {
+  }
+
+  @Subcomponent
+  @ServiceScoped
+  public abstract static class ServiceC implements ServiceComponent,
+      GeneratedComponent {
+    @Subcomponent.Builder
+    abstract interface Builder extends ServiceComponentBuilder {
+    }
+  }
+
+  @Subcomponent(
+      modules = {
+          ActivityCBuilderModule.class,
+          ViewModelCBuilderModule.class,
+          HiltWrapper_ActivityRetainedComponentManager_LifecycleModule.class,
+          PostViewModel_HiltModules.KeyModule.class
+      }
+  )
+  @ActivityRetainedScoped
+  public abstract static class ActivityRetainedC implements ActivityRetainedComponent,
+      ActivityComponentManager.ActivityComponentBuilderEntryPoint,
+      HiltWrapper_ActivityRetainedComponentManager_ActivityRetainedLifecycleEntryPoint,
+      GeneratedComponent {
+    @Subcomponent.Builder
+    abstract interface Builder extends ActivityRetainedComponentBuilder {
+    }
+  }
+
+  @Subcomponent(
+      modules = {
+          FragmentCBuilderModule.class,
+          ViewCBuilderModule.class,
+          HiltWrapper_ActivityModule.class,
+          HiltWrapper_DefaultViewModelFactories_ActivityModule.class,
+          ViewModelFactoryModules.ActivityModule.class
+      }
+  )
+  @ActivityScoped
+  public abstract static class ActivityC implements MainActivity_GeneratedInjector,
+      ActivityComponent,
+      DefaultViewModelFactories.ActivityEntryPoint,
+      HiltWrapper_HiltViewModelFactory_ActivityCreatorEntryPoint,
+      FragmentComponentManager.FragmentComponentBuilderEntryPoint,
+      ViewComponentManager.ViewComponentBuilderEntryPoint,
+      GeneratedComponent {
+    @Subcomponent.Builder
+    abstract interface Builder extends ActivityComponentBuilder {
+    }
+  }
+
+  @Subcomponent(
+      modules = {
+          HiltWrapper_HiltViewModelFactory_ViewModelModule.class,
+          PostViewModel_HiltModules.BindsModule.class
+      }
+  )
+  @ViewModelScoped
+  public abstract static class ViewModelC implements ViewModelComponent,
+      HiltViewModelFactory.ViewModelFactoriesEntryPoint,
+      GeneratedComponent {
+    @Subcomponent.Builder
+    abstract interface Builder extends ViewModelComponentBuilder {
+    }
+  }
+
+  @Subcomponent
+  @ViewScoped
+  public abstract static class ViewC implements ViewComponent,
+      GeneratedComponent {
+    @Subcomponent.Builder
+    abstract interface Builder extends ViewComponentBuilder {
+    }
+  }
+
+  @Subcomponent(
+      modules = {
+          ViewWithFragmentCBuilderModule.class,
+          ViewModelFactoryModules.FragmentModule.class
+      }
+  )
+  @FragmentScoped
+  public abstract static class FragmentC implements AccessoryFragment_GeneratedInjector,
+      ArcadeFragment_GeneratedInjector,
+      FashionFragment_GeneratedInjector,
+      FoodFragment_GeneratedInjector,
+      HeathFragment_GeneratedInjector,
+      HomeFragment_GeneratedInjector,
+      LifestyleFragment_GeneratedInjector,
+      SportsFragment_GeneratedInjector,
+      FragmentComponent,
+      DefaultViewModelFactories.FragmentEntryPoint,
+      ViewComponentManager.ViewWithFragmentComponentBuilderEntryPoint,
+      GeneratedComponent {
+    @Subcomponent.Builder
+    abstract interface Builder extends FragmentComponentBuilder {
+    }
+  }
+
+  @Subcomponent
+  @ViewScoped
+  public abstract static class ViewWithFragmentC implements ViewWithFragmentComponent,
+      GeneratedComponent {
+    @Subcomponent.Builder
+    abstract interface Builder extends ViewWithFragmentComponentBuilder {
+    }
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/BaseApplication_ComponentTreeDeps.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/BaseApplication_ComponentTreeDeps.java	(date 1628686171220)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/BaseApplication_ComponentTreeDeps.java	(date 1628686171220)
@@ -0,0 +1,108 @@
+package com.test.dummyappv3;
+
+import dagger.hilt.internal.aggregatedroot.codegen._com_test_dummyappv3_BaseApplication;
+import dagger.hilt.internal.componenttreedeps.ComponentTreeDeps;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_components_ActivityComponent;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_components_ActivityRetainedComponent;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_components_FragmentComponent;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_components_ServiceComponent;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_components_ViewComponent;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_components_ViewModelComponent;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_components_ViewWithFragmentComponent;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_internal_builders_ActivityComponentBuilder;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_internal_builders_ActivityRetainedComponentBuilder;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_internal_builders_FragmentComponentBuilder;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_internal_builders_ServiceComponentBuilder;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_internal_builders_ViewComponentBuilder;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_internal_builders_ViewModelComponentBuilder;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_android_internal_builders_ViewWithFragmentComponentBuilder;
+import dagger.hilt.processor.internal.definecomponent.codegen._dagger_hilt_components_SingletonComponent;
+import hilt_aggregated_deps._androidx_hilt_lifecycle_ViewModelFactoryModules_ActivityModuleModuleDeps;
+import hilt_aggregated_deps._androidx_hilt_lifecycle_ViewModelFactoryModules_FragmentModuleModuleDeps;
+import hilt_aggregated_deps._com_test_dummyappv3_BaseApplication_GeneratedInjector;
+import hilt_aggregated_deps._com_test_dummyappv3_di_DatabaseModule;
+import hilt_aggregated_deps._com_test_dummyappv3_di_NetworkModule;
+import hilt_aggregated_deps._com_test_dummyappv3_ui_accessory_AccessoryFragment_GeneratedInjector;
+import hilt_aggregated_deps._com_test_dummyappv3_ui_arcade_ArcadeFragment_GeneratedInjector;
+import hilt_aggregated_deps._com_test_dummyappv3_ui_fashion_FashionFragment_GeneratedInjector;
+import hilt_aggregated_deps._com_test_dummyappv3_ui_food_FoodFragment_GeneratedInjector;
+import hilt_aggregated_deps._com_test_dummyappv3_ui_heath_HeathFragment_GeneratedInjector;
+import hilt_aggregated_deps._com_test_dummyappv3_ui_home_HomeFragment_GeneratedInjector;
+import hilt_aggregated_deps._com_test_dummyappv3_ui_lifestyle_LifestyleFragment_GeneratedInjector;
+import hilt_aggregated_deps._com_test_dummyappv3_ui_main_MainActivity_GeneratedInjector;
+import hilt_aggregated_deps._com_test_dummyappv3_ui_sports_SportsFragment_GeneratedInjector;
+import hilt_aggregated_deps._com_test_dummyappv3_viewmodels_PostViewModel_HiltModules_BindsModule;
+import hilt_aggregated_deps._com_test_dummyappv3_viewmodels_PostViewModel_HiltModules_KeyModule;
+import hilt_aggregated_deps._dagger_hilt_android_internal_lifecycle_DefaultViewModelFactories_ActivityEntryPoint;
+import hilt_aggregated_deps._dagger_hilt_android_internal_lifecycle_DefaultViewModelFactories_FragmentEntryPoint;
+import hilt_aggregated_deps._dagger_hilt_android_internal_lifecycle_HiltViewModelFactory_ViewModelFactoriesEntryPoint;
+import hilt_aggregated_deps._dagger_hilt_android_internal_lifecycle_HiltWrapper_DefaultViewModelFactories_ActivityModule;
+import hilt_aggregated_deps._dagger_hilt_android_internal_lifecycle_HiltWrapper_HiltViewModelFactory_ActivityCreatorEntryPoint;
+import hilt_aggregated_deps._dagger_hilt_android_internal_lifecycle_HiltWrapper_HiltViewModelFactory_ViewModelModule;
+import hilt_aggregated_deps._dagger_hilt_android_internal_managers_ActivityComponentManager_ActivityComponentBuilderEntryPoint;
+import hilt_aggregated_deps._dagger_hilt_android_internal_managers_FragmentComponentManager_FragmentComponentBuilderEntryPoint;
+import hilt_aggregated_deps._dagger_hilt_android_internal_managers_HiltWrapper_ActivityRetainedComponentManager_ActivityRetainedComponentBuilderEntryPoint;
+import hilt_aggregated_deps._dagger_hilt_android_internal_managers_HiltWrapper_ActivityRetainedComponentManager_ActivityRetainedLifecycleEntryPoint;
+import hilt_aggregated_deps._dagger_hilt_android_internal_managers_HiltWrapper_ActivityRetainedComponentManager_LifecycleModule;
+import hilt_aggregated_deps._dagger_hilt_android_internal_managers_ServiceComponentManager_ServiceComponentBuilderEntryPoint;
+import hilt_aggregated_deps._dagger_hilt_android_internal_managers_ViewComponentManager_ViewComponentBuilderEntryPoint;
+import hilt_aggregated_deps._dagger_hilt_android_internal_managers_ViewComponentManager_ViewWithFragmentComponentBuilderEntryPoint;
+import hilt_aggregated_deps._dagger_hilt_android_internal_modules_ApplicationContextModule;
+import hilt_aggregated_deps._dagger_hilt_android_internal_modules_HiltWrapper_ActivityModule;
+
+@ComponentTreeDeps(
+    rootDeps = _com_test_dummyappv3_BaseApplication.class,
+    defineComponentDeps = {
+        _dagger_hilt_android_components_ActivityComponent.class,
+        _dagger_hilt_android_components_ActivityRetainedComponent.class,
+        _dagger_hilt_android_components_FragmentComponent.class,
+        _dagger_hilt_android_components_ServiceComponent.class,
+        _dagger_hilt_android_components_ViewComponent.class,
+        _dagger_hilt_android_components_ViewModelComponent.class,
+        _dagger_hilt_android_components_ViewWithFragmentComponent.class,
+        _dagger_hilt_android_internal_builders_ActivityComponentBuilder.class,
+        _dagger_hilt_android_internal_builders_ActivityRetainedComponentBuilder.class,
+        _dagger_hilt_android_internal_builders_FragmentComponentBuilder.class,
+        _dagger_hilt_android_internal_builders_ServiceComponentBuilder.class,
+        _dagger_hilt_android_internal_builders_ViewComponentBuilder.class,
+        _dagger_hilt_android_internal_builders_ViewModelComponentBuilder.class,
+        _dagger_hilt_android_internal_builders_ViewWithFragmentComponentBuilder.class,
+        _dagger_hilt_components_SingletonComponent.class
+    },
+    aggregatedDeps = {
+        _androidx_hilt_lifecycle_ViewModelFactoryModules_FragmentModuleModuleDeps.class,
+        _androidx_hilt_lifecycle_ViewModelFactoryModules_ActivityModuleModuleDeps.class,
+        _dagger_hilt_android_internal_lifecycle_DefaultViewModelFactories_ActivityEntryPoint.class,
+        _dagger_hilt_android_internal_lifecycle_DefaultViewModelFactories_FragmentEntryPoint.class,
+        _dagger_hilt_android_internal_lifecycle_HiltViewModelFactory_ViewModelFactoriesEntryPoint.class,
+        _dagger_hilt_android_internal_lifecycle_HiltWrapper_DefaultViewModelFactories_ActivityModule.class,
+        _dagger_hilt_android_internal_lifecycle_HiltWrapper_HiltViewModelFactory_ActivityCreatorEntryPoint.class,
+        _dagger_hilt_android_internal_lifecycle_HiltWrapper_HiltViewModelFactory_ViewModelModule.class,
+        _dagger_hilt_android_internal_managers_ActivityComponentManager_ActivityComponentBuilderEntryPoint.class,
+        _dagger_hilt_android_internal_managers_FragmentComponentManager_FragmentComponentBuilderEntryPoint.class,
+        _dagger_hilt_android_internal_managers_HiltWrapper_ActivityRetainedComponentManager_ActivityRetainedComponentBuilderEntryPoint.class,
+        _dagger_hilt_android_internal_managers_HiltWrapper_ActivityRetainedComponentManager_ActivityRetainedLifecycleEntryPoint.class,
+        _dagger_hilt_android_internal_managers_HiltWrapper_ActivityRetainedComponentManager_LifecycleModule.class,
+        _dagger_hilt_android_internal_managers_ServiceComponentManager_ServiceComponentBuilderEntryPoint.class,
+        _dagger_hilt_android_internal_managers_ViewComponentManager_ViewComponentBuilderEntryPoint.class,
+        _dagger_hilt_android_internal_managers_ViewComponentManager_ViewWithFragmentComponentBuilderEntryPoint.class,
+        _dagger_hilt_android_internal_modules_ApplicationContextModule.class,
+        _dagger_hilt_android_internal_modules_HiltWrapper_ActivityModule.class,
+        _com_test_dummyappv3_di_DatabaseModule.class,
+        _com_test_dummyappv3_di_NetworkModule.class,
+        _com_test_dummyappv3_BaseApplication_GeneratedInjector.class,
+        _com_test_dummyappv3_ui_accessory_AccessoryFragment_GeneratedInjector.class,
+        _com_test_dummyappv3_ui_arcade_ArcadeFragment_GeneratedInjector.class,
+        _com_test_dummyappv3_ui_fashion_FashionFragment_GeneratedInjector.class,
+        _com_test_dummyappv3_ui_food_FoodFragment_GeneratedInjector.class,
+        _com_test_dummyappv3_ui_heath_HeathFragment_GeneratedInjector.class,
+        _com_test_dummyappv3_ui_home_HomeFragment_GeneratedInjector.class,
+        _com_test_dummyappv3_ui_lifestyle_LifestyleFragment_GeneratedInjector.class,
+        _com_test_dummyappv3_ui_main_MainActivity_GeneratedInjector.class,
+        _com_test_dummyappv3_ui_sports_SportsFragment_GeneratedInjector.class,
+        _com_test_dummyappv3_viewmodels_PostViewModel_HiltModules_BindsModule.class,
+        _com_test_dummyappv3_viewmodels_PostViewModel_HiltModules_KeyModule.class
+    }
+)
+class BaseApplication_ComponentTreeDeps {
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/BaseApplication_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/BaseApplication_GeneratedInjector.java	(date 1628686170351)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/BaseApplication_GeneratedInjector.java	(date 1628686170351)
@@ -0,0 +1,15 @@
+package com.test.dummyappv3;
+
+import dagger.hilt.InstallIn;
+import dagger.hilt.codegen.OriginatingElement;
+import dagger.hilt.components.SingletonComponent;
+import dagger.hilt.internal.GeneratedEntryPoint;
+
+@OriginatingElement(
+    topLevelClass = BaseApplication.class
+)
+@GeneratedEntryPoint
+@InstallIn(SingletonComponent.class)
+public interface BaseApplication_GeneratedInjector {
+  void injectBaseApplication(BaseApplication baseApplication);
+}
Index: app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/DaggerBaseApplication_HiltComponents_SingletonC.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/DaggerBaseApplication_HiltComponents_SingletonC.java	(date 1628686172892)
+++ app/build/generated/ap_generated_sources/release/out/com/test/dummyappv3/DaggerBaseApplication_HiltComponents_SingletonC.java	(date 1628686172892)
@@ -0,0 +1,650 @@
+// Generated by Dagger (https://dagger.dev).
+package com.test.dummyappv3;
+
+import android.app.Activity;
+import android.app.Service;
+import android.view.View;
+import androidx.fragment.app.Fragment;
+import androidx.lifecycle.SavedStateHandle;
+import androidx.lifecycle.ViewModel;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import com.test.dummyappv3.data.LocalDataSource;
+import com.test.dummyappv3.data.RemoteDataSource;
+import com.test.dummyappv3.data.Repository;
+import com.test.dummyappv3.data.database.ItemDAO;
+import com.test.dummyappv3.data.database.ItemsDatabase;
+import com.test.dummyappv3.data.network.PostAPIService;
+import com.test.dummyappv3.di.DatabaseModule;
+import com.test.dummyappv3.di.DatabaseModule_ProvideDaoFactory;
+import com.test.dummyappv3.di.DatabaseModule_ProvideDatabaseFactory;
+import com.test.dummyappv3.di.NetworkModule;
+import com.test.dummyappv3.di.NetworkModule_PostAPIServiceFactory;
+import com.test.dummyappv3.ui.accessory.AccessoryFragment;
+import com.test.dummyappv3.ui.arcade.ArcadeFragment;
+import com.test.dummyappv3.ui.fashion.FashionFragment;
+import com.test.dummyappv3.ui.food.FoodFragment;
+import com.test.dummyappv3.ui.heath.HeathFragment;
+import com.test.dummyappv3.ui.home.HomeFragment;
+import com.test.dummyappv3.ui.lifestyle.LifestyleFragment;
+import com.test.dummyappv3.ui.main.MainActivity;
+import com.test.dummyappv3.ui.sports.SportsFragment;
+import com.test.dummyappv3.viewmodels.PostViewModel;
+import com.test.dummyappv3.viewmodels.PostViewModel_HiltModules_KeyModule_ProvideFactory;
+import dagger.hilt.android.ActivityRetainedLifecycle;
+import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
+import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
+import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
+import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
+import dagger.hilt.android.internal.builders.ViewComponentBuilder;
+import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
+import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
+import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
+import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
+import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
+import dagger.hilt.android.internal.modules.ApplicationContextModule;
+import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
+import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
+import dagger.internal.DaggerGenerated;
+import dagger.internal.DoubleCheck;
+import dagger.internal.Preconditions;
+import java.util.Map;
+import java.util.Set;
+import javax.inject.Provider;
+
+@DaggerGenerated
+@SuppressWarnings({
+    "unchecked",
+    "rawtypes"
+})
+public final class DaggerBaseApplication_HiltComponents_SingletonC extends BaseApplication_HiltComponents.SingletonC {
+  private final ApplicationContextModule applicationContextModule;
+
+  private final DaggerBaseApplication_HiltComponents_SingletonC singletonC = this;
+
+  private Provider<PostAPIService> postAPIServiceProvider;
+
+  private Provider<ItemsDatabase> provideDatabaseProvider;
+
+  private Provider<ItemDAO> provideDaoProvider;
+
+  private DaggerBaseApplication_HiltComponents_SingletonC(
+      ApplicationContextModule applicationContextModuleParam) {
+    this.applicationContextModule = applicationContextModuleParam;
+    initialize(applicationContextModuleParam);
+
+  }
+
+  public static Builder builder() {
+    return new Builder();
+  }
+
+  private ItemsDatabase itemsDatabase() {
+    return DatabaseModule_ProvideDatabaseFactory.provideDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
+  }
+
+  private ItemDAO itemDAO() {
+    return DatabaseModule_ProvideDaoFactory.provideDao(provideDatabaseProvider.get());
+  }
+
+  @SuppressWarnings("unchecked")
+  private void initialize(final ApplicationContextModule applicationContextModuleParam) {
+    this.postAPIServiceProvider = DoubleCheck.provider(new SwitchingProvider<PostAPIService>(singletonC, 0));
+    this.provideDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<ItemsDatabase>(singletonC, 2));
+    this.provideDaoProvider = DoubleCheck.provider(new SwitchingProvider<ItemDAO>(singletonC, 1));
+  }
+
+  @Override
+  public void injectBaseApplication(BaseApplication baseApplication) {
+  }
+
+  @Override
+  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
+    return new ActivityRetainedCBuilder(singletonC);
+  }
+
+  @Override
+  public ServiceComponentBuilder serviceComponentBuilder() {
+    return new ServiceCBuilder(singletonC);
+  }
+
+  public static final class Builder {
+    private ApplicationContextModule applicationContextModule;
+
+    private Builder() {
+    }
+
+    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
+      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
+      return this;
+    }
+
+    /**
+     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
+     */
+    @Deprecated
+    public Builder databaseModule(DatabaseModule databaseModule) {
+      Preconditions.checkNotNull(databaseModule);
+      return this;
+    }
+
+    /**
+     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
+     */
+    @Deprecated
+    public Builder networkModule(NetworkModule networkModule) {
+      Preconditions.checkNotNull(networkModule);
+      return this;
+    }
+
+    public BaseApplication_HiltComponents.SingletonC build() {
+      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
+      return new DaggerBaseApplication_HiltComponents_SingletonC(applicationContextModule);
+    }
+  }
+
+  private static final class ActivityRetainedCBuilder implements BaseApplication_HiltComponents.ActivityRetainedC.Builder {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private ActivityRetainedCBuilder(DaggerBaseApplication_HiltComponents_SingletonC singletonC) {
+      this.singletonC = singletonC;
+    }
+
+    @Override
+    public BaseApplication_HiltComponents.ActivityRetainedC build() {
+      return new ActivityRetainedCImpl(singletonC);
+    }
+  }
+
+  private static final class ActivityCBuilder implements BaseApplication_HiltComponents.ActivityC.Builder {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private final ActivityRetainedCImpl activityRetainedCImpl;
+
+    private Activity activity;
+
+    private ActivityCBuilder(DaggerBaseApplication_HiltComponents_SingletonC singletonC,
+        ActivityRetainedCImpl activityRetainedCImpl) {
+      this.singletonC = singletonC;
+      this.activityRetainedCImpl = activityRetainedCImpl;
+    }
+
+    @Override
+    public ActivityCBuilder activity(Activity activity) {
+      this.activity = Preconditions.checkNotNull(activity);
+      return this;
+    }
+
+    @Override
+    public BaseApplication_HiltComponents.ActivityC build() {
+      Preconditions.checkBuilderRequirement(activity, Activity.class);
+      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
+    }
+  }
+
+  private static final class FragmentCBuilder implements BaseApplication_HiltComponents.FragmentC.Builder {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private final ActivityRetainedCImpl activityRetainedCImpl;
+
+    private final ActivityCImpl activityCImpl;
+
+    private Fragment fragment;
+
+    private FragmentCBuilder(DaggerBaseApplication_HiltComponents_SingletonC singletonC,
+        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
+      this.singletonC = singletonC;
+      this.activityRetainedCImpl = activityRetainedCImpl;
+      this.activityCImpl = activityCImpl;
+    }
+
+    @Override
+    public FragmentCBuilder fragment(Fragment fragment) {
+      this.fragment = Preconditions.checkNotNull(fragment);
+      return this;
+    }
+
+    @Override
+    public BaseApplication_HiltComponents.FragmentC build() {
+      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
+      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
+    }
+  }
+
+  private static final class ViewWithFragmentCBuilder implements BaseApplication_HiltComponents.ViewWithFragmentC.Builder {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private final ActivityRetainedCImpl activityRetainedCImpl;
+
+    private final ActivityCImpl activityCImpl;
+
+    private final FragmentCImpl fragmentCImpl;
+
+    private View view;
+
+    private ViewWithFragmentCBuilder(DaggerBaseApplication_HiltComponents_SingletonC singletonC,
+        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
+        FragmentCImpl fragmentCImpl) {
+      this.singletonC = singletonC;
+      this.activityRetainedCImpl = activityRetainedCImpl;
+      this.activityCImpl = activityCImpl;
+      this.fragmentCImpl = fragmentCImpl;
+    }
+
+    @Override
+    public ViewWithFragmentCBuilder view(View view) {
+      this.view = Preconditions.checkNotNull(view);
+      return this;
+    }
+
+    @Override
+    public BaseApplication_HiltComponents.ViewWithFragmentC build() {
+      Preconditions.checkBuilderRequirement(view, View.class);
+      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
+    }
+  }
+
+  private static final class ViewCBuilder implements BaseApplication_HiltComponents.ViewC.Builder {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private final ActivityRetainedCImpl activityRetainedCImpl;
+
+    private final ActivityCImpl activityCImpl;
+
+    private View view;
+
+    private ViewCBuilder(DaggerBaseApplication_HiltComponents_SingletonC singletonC,
+        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
+      this.singletonC = singletonC;
+      this.activityRetainedCImpl = activityRetainedCImpl;
+      this.activityCImpl = activityCImpl;
+    }
+
+    @Override
+    public ViewCBuilder view(View view) {
+      this.view = Preconditions.checkNotNull(view);
+      return this;
+    }
+
+    @Override
+    public BaseApplication_HiltComponents.ViewC build() {
+      Preconditions.checkBuilderRequirement(view, View.class);
+      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
+    }
+  }
+
+  private static final class ViewModelCBuilder implements BaseApplication_HiltComponents.ViewModelC.Builder {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private final ActivityRetainedCImpl activityRetainedCImpl;
+
+    private SavedStateHandle savedStateHandle;
+
+    private ViewModelCBuilder(DaggerBaseApplication_HiltComponents_SingletonC singletonC,
+        ActivityRetainedCImpl activityRetainedCImpl) {
+      this.singletonC = singletonC;
+      this.activityRetainedCImpl = activityRetainedCImpl;
+    }
+
+    @Override
+    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
+      this.savedStateHandle = Preconditions.checkNotNull(handle);
+      return this;
+    }
+
+    @Override
+    public BaseApplication_HiltComponents.ViewModelC build() {
+      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
+      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
+    }
+  }
+
+  private static final class ServiceCBuilder implements BaseApplication_HiltComponents.ServiceC.Builder {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private Service service;
+
+    private ServiceCBuilder(DaggerBaseApplication_HiltComponents_SingletonC singletonC) {
+      this.singletonC = singletonC;
+    }
+
+    @Override
+    public ServiceCBuilder service(Service service) {
+      this.service = Preconditions.checkNotNull(service);
+      return this;
+    }
+
+    @Override
+    public BaseApplication_HiltComponents.ServiceC build() {
+      Preconditions.checkBuilderRequirement(service, Service.class);
+      return new ServiceCImpl(singletonC, service);
+    }
+  }
+
+  private static final class ViewWithFragmentCImpl extends BaseApplication_HiltComponents.ViewWithFragmentC {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private final ActivityRetainedCImpl activityRetainedCImpl;
+
+    private final ActivityCImpl activityCImpl;
+
+    private final FragmentCImpl fragmentCImpl;
+
+    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;
+
+    private ViewWithFragmentCImpl(DaggerBaseApplication_HiltComponents_SingletonC singletonC,
+        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
+        FragmentCImpl fragmentCImpl, View viewParam) {
+      this.singletonC = singletonC;
+      this.activityRetainedCImpl = activityRetainedCImpl;
+      this.activityCImpl = activityCImpl;
+      this.fragmentCImpl = fragmentCImpl;
+
+
+    }
+  }
+
+  private static final class FragmentCImpl extends BaseApplication_HiltComponents.FragmentC {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private final ActivityRetainedCImpl activityRetainedCImpl;
+
+    private final ActivityCImpl activityCImpl;
+
+    private final FragmentCImpl fragmentCImpl = this;
+
+    private FragmentCImpl(DaggerBaseApplication_HiltComponents_SingletonC singletonC,
+        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
+        Fragment fragmentParam) {
+      this.singletonC = singletonC;
+      this.activityRetainedCImpl = activityRetainedCImpl;
+      this.activityCImpl = activityCImpl;
+
+
+    }
+
+    @Override
+    public void injectAccessoryFragment(AccessoryFragment accessoryFragment) {
+    }
+
+    @Override
+    public void injectArcadeFragment(ArcadeFragment arcadeFragment) {
+    }
+
+    @Override
+    public void injectFashionFragment(FashionFragment fashionFragment) {
+    }
+
+    @Override
+    public void injectFoodFragment(FoodFragment foodFragment) {
+    }
+
+    @Override
+    public void injectHeathFragment(HeathFragment heathFragment) {
+    }
+
+    @Override
+    public void injectHomeFragment(HomeFragment homeFragment) {
+    }
+
+    @Override
+    public void injectLifestyleFragment(LifestyleFragment lifestyleFragment) {
+    }
+
+    @Override
+    public void injectSportsFragment(SportsFragment sportsFragment) {
+    }
+
+    @Override
+    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
+      return activityCImpl.getHiltInternalFactoryFactory();
+    }
+
+    @Override
+    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
+      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
+    }
+  }
+
+  private static final class ViewCImpl extends BaseApplication_HiltComponents.ViewC {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private final ActivityRetainedCImpl activityRetainedCImpl;
+
+    private final ActivityCImpl activityCImpl;
+
+    private final ViewCImpl viewCImpl = this;
+
+    private ViewCImpl(DaggerBaseApplication_HiltComponents_SingletonC singletonC,
+        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
+      this.singletonC = singletonC;
+      this.activityRetainedCImpl = activityRetainedCImpl;
+      this.activityCImpl = activityCImpl;
+
+
+    }
+  }
+
+  private static final class ActivityCImpl extends BaseApplication_HiltComponents.ActivityC {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private final ActivityRetainedCImpl activityRetainedCImpl;
+
+    private final ActivityCImpl activityCImpl = this;
+
+    private ActivityCImpl(DaggerBaseApplication_HiltComponents_SingletonC singletonC,
+        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
+      this.singletonC = singletonC;
+      this.activityRetainedCImpl = activityRetainedCImpl;
+
+
+    }
+
+    @Override
+    public void injectMainActivity(MainActivity mainActivity) {
+    }
+
+    @Override
+    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
+      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
+    }
+
+    @Override
+    public Set<String> getViewModelKeys() {
+      return ImmutableSet.<String>of(PostViewModel_HiltModules_KeyModule_ProvideFactory.provide());
+    }
+
+    @Override
+    public ViewModelComponentBuilder getViewModelComponentBuilder() {
+      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
+    }
+
+    @Override
+    public FragmentComponentBuilder fragmentComponentBuilder() {
+      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
+    }
+
+    @Override
+    public ViewComponentBuilder viewComponentBuilder() {
+      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
+    }
+  }
+
+  private static final class ViewModelCImpl extends BaseApplication_HiltComponents.ViewModelC {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private final ActivityRetainedCImpl activityRetainedCImpl;
+
+    private final ViewModelCImpl viewModelCImpl = this;
+
+    private Provider<PostViewModel> postViewModelProvider;
+
+    private ViewModelCImpl(DaggerBaseApplication_HiltComponents_SingletonC singletonC,
+        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
+      this.singletonC = singletonC;
+      this.activityRetainedCImpl = activityRetainedCImpl;
+
+      initialize(savedStateHandleParam);
+
+    }
+
+    private PostViewModel postViewModel() {
+      return new PostViewModel(activityRetainedCImpl.repositoryProvider.get());
+    }
+
+    @SuppressWarnings("unchecked")
+    private void initialize(final SavedStateHandle savedStateHandleParam) {
+      this.postViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
+    }
+
+    @Override
+    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
+      return ImmutableMap.<String, Provider<ViewModel>>of("com.test.dummyappv3.viewmodels.PostViewModel", (Provider) postViewModelProvider);
+    }
+
+    private static final class SwitchingProvider<T> implements Provider<T> {
+      private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+      private final ActivityRetainedCImpl activityRetainedCImpl;
+
+      private final ViewModelCImpl viewModelCImpl;
+
+      private final int id;
+
+      SwitchingProvider(DaggerBaseApplication_HiltComponents_SingletonC singletonC,
+          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
+        this.singletonC = singletonC;
+        this.activityRetainedCImpl = activityRetainedCImpl;
+        this.viewModelCImpl = viewModelCImpl;
+        this.id = id;
+      }
+
+      @SuppressWarnings("unchecked")
+      @Override
+      public T get() {
+        switch (id) {
+          case 0: // com.test.dummyappv3.viewmodels.PostViewModel 
+          return (T) viewModelCImpl.postViewModel();
+
+          default: throw new AssertionError(id);
+        }
+      }
+    }
+  }
+
+  private static final class ActivityRetainedCImpl extends BaseApplication_HiltComponents.ActivityRetainedC {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private final ActivityRetainedCImpl activityRetainedCImpl = this;
+
+    @SuppressWarnings("rawtypes")
+    private Provider lifecycleProvider;
+
+    private Provider<Repository> repositoryProvider;
+
+    private ActivityRetainedCImpl(DaggerBaseApplication_HiltComponents_SingletonC singletonC) {
+      this.singletonC = singletonC;
+
+      initialize();
+
+    }
+
+    private RemoteDataSource remoteDataSource() {
+      return new RemoteDataSource(singletonC.postAPIServiceProvider.get());
+    }
+
+    private LocalDataSource localDataSource() {
+      return new LocalDataSource(singletonC.provideDaoProvider.get());
+    }
+
+    private Repository repository() {
+      return new Repository(remoteDataSource(), localDataSource());
+    }
+
+    @SuppressWarnings("unchecked")
+    private void initialize() {
+      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
+      this.repositoryProvider = DoubleCheck.provider(new SwitchingProvider<Repository>(singletonC, activityRetainedCImpl, 1));
+    }
+
+    @Override
+    public ActivityComponentBuilder activityComponentBuilder() {
+      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
+    }
+
+    @Override
+    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
+      return (ActivityRetainedLifecycle) lifecycleProvider.get();
+    }
+
+    private static final class SwitchingProvider<T> implements Provider<T> {
+      private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+      private final ActivityRetainedCImpl activityRetainedCImpl;
+
+      private final int id;
+
+      SwitchingProvider(DaggerBaseApplication_HiltComponents_SingletonC singletonC,
+          ActivityRetainedCImpl activityRetainedCImpl, int id) {
+        this.singletonC = singletonC;
+        this.activityRetainedCImpl = activityRetainedCImpl;
+        this.id = id;
+      }
+
+      @SuppressWarnings("unchecked")
+      @Override
+      public T get() {
+        switch (id) {
+          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
+          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
+
+          case 1: // com.test.dummyappv3.data.Repository 
+          return (T) activityRetainedCImpl.repository();
+
+          default: throw new AssertionError(id);
+        }
+      }
+    }
+  }
+
+  private static final class ServiceCImpl extends BaseApplication_HiltComponents.ServiceC {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private final ServiceCImpl serviceCImpl = this;
+
+    private ServiceCImpl(DaggerBaseApplication_HiltComponents_SingletonC singletonC,
+        Service serviceParam) {
+      this.singletonC = singletonC;
+
+
+    }
+  }
+
+  private static final class SwitchingProvider<T> implements Provider<T> {
+    private final DaggerBaseApplication_HiltComponents_SingletonC singletonC;
+
+    private final int id;
+
+    SwitchingProvider(DaggerBaseApplication_HiltComponents_SingletonC singletonC, int id) {
+      this.singletonC = singletonC;
+      this.id = id;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public T get() {
+      switch (id) {
+        case 0: // com.test.dummyappv3.data.network.PostAPIService 
+        return (T) NetworkModule_PostAPIServiceFactory.postAPIService();
+
+        case 1: // com.test.dummyappv3.data.database.ItemDAO 
+        return (T) singletonC.itemDAO();
+
+        case 2: // com.test.dummyappv3.data.database.ItemsDatabase 
+        return (T) singletonC.itemsDatabase();
+
+        default: throw new AssertionError(id);
+      }
+    }
+  }
+}
Index: app/build/generated/ap_generated_sources/release/out/dagger/hilt/internal/aggregatedroot/codegen/_com_test_dummyappv3_BaseApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/dagger/hilt/internal/aggregatedroot/codegen/_com_test_dummyappv3_BaseApplication.java	(date 1628686170304)
+++ app/build/generated/ap_generated_sources/release/out/dagger/hilt/internal/aggregatedroot/codegen/_com_test_dummyappv3_BaseApplication.java	(date 1628686170304)
@@ -0,0 +1,15 @@
+package dagger.hilt.internal.aggregatedroot.codegen;
+
+import dagger.hilt.android.HiltAndroidApp;
+import dagger.hilt.internal.aggregatedroot.AggregatedRoot;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedRoot(
+    root = "com.test.dummyappv3.BaseApplication",
+    originatingRoot = "com.test.dummyappv3.BaseApplication",
+    rootAnnotation = HiltAndroidApp.class
+)
+public class _com_test_dummyappv3_BaseApplication {
+}
Index: app/build/generated/ap_generated_sources/release/out/dagger/hilt/internal/processedrootsentinel/codegen/_com_test_dummyappv3_BaseApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/dagger/hilt/internal/processedrootsentinel/codegen/_com_test_dummyappv3_BaseApplication.java	(date 1628686171223)
+++ app/build/generated/ap_generated_sources/release/out/dagger/hilt/internal/processedrootsentinel/codegen/_com_test_dummyappv3_BaseApplication.java	(date 1628686171223)
@@ -0,0 +1,12 @@
+package dagger.hilt.internal.processedrootsentinel.codegen;
+
+import dagger.hilt.internal.processedrootsentinel.ProcessedRootSentinel;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@ProcessedRootSentinel(
+    roots = "com.test.dummyappv3.BaseApplication"
+)
+public class _com_test_dummyappv3_BaseApplication {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_di_NetworkModule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_di_NetworkModule.java	(date 1628686170287)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_di_NetworkModule.java	(date 1628686170287)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.components.SingletonComponent",
+    modules = "com.test.dummyappv3.di.NetworkModule"
+)
+public class _com_test_dummyappv3_di_NetworkModule {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_di_DatabaseModule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_di_DatabaseModule.java	(date 1628686170284)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_di_DatabaseModule.java	(date 1628686170284)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.components.SingletonComponent",
+    modules = "com.test.dummyappv3.di.DatabaseModule"
+)
+public class _com_test_dummyappv3_di_DatabaseModule {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_BaseApplication_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_BaseApplication_GeneratedInjector.java	(date 1628686171038)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_BaseApplication_GeneratedInjector.java	(date 1628686171038)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.components.SingletonComponent",
+    entryPoints = "com.test.dummyappv3.BaseApplication_GeneratedInjector"
+)
+public class _com_test_dummyappv3_BaseApplication_GeneratedInjector {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_food_FoodFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_food_FoodFragment_GeneratedInjector.java	(date 1628686171048)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_food_FoodFragment_GeneratedInjector.java	(date 1628686171048)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.android.components.FragmentComponent",
+    entryPoints = "com.test.dummyappv3.ui.food.FoodFragment_GeneratedInjector"
+)
+public class _com_test_dummyappv3_ui_food_FoodFragment_GeneratedInjector {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_home_HomeFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_home_HomeFragment_GeneratedInjector.java	(date 1628686171053)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_home_HomeFragment_GeneratedInjector.java	(date 1628686171053)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.android.components.FragmentComponent",
+    entryPoints = "com.test.dummyappv3.ui.home.HomeFragment_GeneratedInjector"
+)
+public class _com_test_dummyappv3_ui_home_HomeFragment_GeneratedInjector {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_main_MainActivity_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_main_MainActivity_GeneratedInjector.java	(date 1628686171060)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_main_MainActivity_GeneratedInjector.java	(date 1628686171060)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.android.components.ActivityComponent",
+    entryPoints = "com.test.dummyappv3.ui.main.MainActivity_GeneratedInjector"
+)
+public class _com_test_dummyappv3_ui_main_MainActivity_GeneratedInjector {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_heath_HeathFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_heath_HeathFragment_GeneratedInjector.java	(date 1628686171051)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_heath_HeathFragment_GeneratedInjector.java	(date 1628686171051)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.android.components.FragmentComponent",
+    entryPoints = "com.test.dummyappv3.ui.heath.HeathFragment_GeneratedInjector"
+)
+public class _com_test_dummyappv3_ui_heath_HeathFragment_GeneratedInjector {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_arcade_ArcadeFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_arcade_ArcadeFragment_GeneratedInjector.java	(date 1628686171044)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_arcade_ArcadeFragment_GeneratedInjector.java	(date 1628686171044)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.android.components.FragmentComponent",
+    entryPoints = "com.test.dummyappv3.ui.arcade.ArcadeFragment_GeneratedInjector"
+)
+public class _com_test_dummyappv3_ui_arcade_ArcadeFragment_GeneratedInjector {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_sports_SportsFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_sports_SportsFragment_GeneratedInjector.java	(date 1628686171064)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_sports_SportsFragment_GeneratedInjector.java	(date 1628686171064)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.android.components.FragmentComponent",
+    entryPoints = "com.test.dummyappv3.ui.sports.SportsFragment_GeneratedInjector"
+)
+public class _com_test_dummyappv3_ui_sports_SportsFragment_GeneratedInjector {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_fashion_FashionFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_fashion_FashionFragment_GeneratedInjector.java	(date 1628686171046)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_fashion_FashionFragment_GeneratedInjector.java	(date 1628686171046)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.android.components.FragmentComponent",
+    entryPoints = "com.test.dummyappv3.ui.fashion.FashionFragment_GeneratedInjector"
+)
+public class _com_test_dummyappv3_ui_fashion_FashionFragment_GeneratedInjector {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_viewmodels_PostViewModel_HiltModules_KeyModule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_viewmodels_PostViewModel_HiltModules_KeyModule.java	(date 1628686171069)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_viewmodels_PostViewModel_HiltModules_KeyModule.java	(date 1628686171069)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.android.components.ActivityRetainedComponent",
+    modules = "com.test.dummyappv3.viewmodels.PostViewModel_HiltModules.KeyModule"
+)
+public class _com_test_dummyappv3_viewmodels_PostViewModel_HiltModules_KeyModule {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_accessory_AccessoryFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_accessory_AccessoryFragment_GeneratedInjector.java	(date 1628686171041)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_accessory_AccessoryFragment_GeneratedInjector.java	(date 1628686171041)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.android.components.FragmentComponent",
+    entryPoints = "com.test.dummyappv3.ui.accessory.AccessoryFragment_GeneratedInjector"
+)
+public class _com_test_dummyappv3_ui_accessory_AccessoryFragment_GeneratedInjector {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_lifestyle_LifestyleFragment_GeneratedInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_lifestyle_LifestyleFragment_GeneratedInjector.java	(date 1628686171056)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_ui_lifestyle_LifestyleFragment_GeneratedInjector.java	(date 1628686171056)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.android.components.FragmentComponent",
+    entryPoints = "com.test.dummyappv3.ui.lifestyle.LifestyleFragment_GeneratedInjector"
+)
+public class _com_test_dummyappv3_ui_lifestyle_LifestyleFragment_GeneratedInjector {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_viewmodels_PostViewModel_HiltModules_BindsModule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_viewmodels_PostViewModel_HiltModules_BindsModule.java	(date 1628686171067)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_com_test_dummyappv3_viewmodels_PostViewModel_HiltModules_BindsModule.java	(date 1628686171067)
@@ -0,0 +1,13 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.processor.internal.aggregateddeps.AggregatedDeps;
+
+/**
+ * This class should only be referenced by generated code!This class aggregates information across multiple compilations.
+ */
+@AggregatedDeps(
+    components = "dagger.hilt.android.components.ViewModelComponent",
+    modules = "com.test.dummyappv3.viewmodels.PostViewModel_HiltModules.BindsModule"
+)
+public class _com_test_dummyappv3_viewmodels_PostViewModel_HiltModules_BindsModule {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_androidx_hilt_lifecycle_ViewModelFactoryModules_ActivityModuleModuleDeps.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_androidx_hilt_lifecycle_ViewModelFactoryModules_ActivityModuleModuleDeps.java	(date 1628686171216)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_androidx_hilt_lifecycle_ViewModelFactoryModules_ActivityModuleModuleDeps.java	(date 1628686171216)
@@ -0,0 +1,7 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.android.internal.legacy.AggregatedElementProxy;
+
+@AggregatedElementProxy(androidx_hilt_lifecycle_ViewModelFactoryModules_ActivityModuleModuleDeps.class)
+public class _androidx_hilt_lifecycle_ViewModelFactoryModules_ActivityModuleModuleDeps {
+}
Index: app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_androidx_hilt_lifecycle_ViewModelFactoryModules_FragmentModuleModuleDeps.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_androidx_hilt_lifecycle_ViewModelFactoryModules_FragmentModuleModuleDeps.java	(date 1628686171214)
+++ app/build/generated/ap_generated_sources/release/out/hilt_aggregated_deps/_androidx_hilt_lifecycle_ViewModelFactoryModules_FragmentModuleModuleDeps.java	(date 1628686171214)
@@ -0,0 +1,7 @@
+package hilt_aggregated_deps;
+
+import dagger.hilt.android.internal.legacy.AggregatedElementProxy;
+
+@AggregatedElementProxy(androidx_hilt_lifecycle_ViewModelFactoryModules_FragmentModuleModuleDeps.class)
+public class _androidx_hilt_lifecycle_ViewModelFactoryModules_FragmentModuleModuleDeps {
+}
